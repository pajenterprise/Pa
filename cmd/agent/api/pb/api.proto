syntax = "proto3";

package pb;

import "google/api/annotations.proto";

// The greeting service definition.
service Agent {
    // get the hostname
    rpc GetHostname (HostnameRequest) returns (HostnameReply) {
        option (google.api.http) = {
            get: "/v1/grpc/host"
        };
    }

    // get tracer heartbeat
    rpc ServiceHeartbeat (FlareHeartbeatRequest) returns (FlareHeartbeatResponse) {
        option (google.api.http) = {
            post: "/v1/grpc/service_heartbeat"
            body: "*"
        };
    }

    // log events
    rpc FlareLogEvent (FlareLogRequest) returns (FlareLogResponse) {
        option (google.api.http) = {
            post: "/v1/grpc/log/{flare_identifier}/{tracer_identifier}"
            body: "*"
        };
    }
}

service AgentSecure {
    rpc GetTags (TagRequest) returns (TagReply) {
        option (google.api.http) = {
            post: "/v1/grpc/tags"
            body: "*"
        };
    }
}

// Hostname

message HostnameRequest {}

// The response message containing the requested hostname
message HostnameReply {
    string hostname = 1;
}

// Tagger

// The request message containing the tag list for an entity.
message TagRequest {
    string entity = 1;
}

// The response message containing the tagger reply
message TagReply {
    repeated string tags = 1;
}

// Flare

enum FlareLogLevel {
    TRACE = 0;
    DEBUG = 1;
    INFO  = 2;
    WARN  = 3;
    ERROR = 4;
}

message FlareHeartbeatRequest {
    string tracer_identifier = 1;
}

message FlareHeartbeatResponse {
    message Trigger {
        int64 flare_identifier = 1;   // Identifier that the tracer
                                      // should supply with the log
                                      // request to be able to
                                      // correlate the log lines with
                                      // a specific flare request.
        FlareLogLevel log_level = 2;  // Which log level the tracer
                                      // should switch to.
        int32 duration_seconds  = 3;  // For how long should the dump
                                      // logs be sent to the agent.
                                      // Can be 0 to only send the
                                      // initialization logs and
                                      // exception logs that the tracer
                                      // might have collected during
                                      // its normal operation.
    }
    Trigger trigger = 1;     // The flare heartbeat response
                             // should be empty if no flare
                             // should be triggered on the
                             // tracer side.
}


message FlareLogRequest {
    int64 flare_identifier = 1;
    int64 tracer_identifier = 2;
    message LogLine {
        // relevant?
        FlareLogLevel log_level = 1;
        string message = 2;
    }
    bool finished = 3;                        // Is this the last one?
    repeated LogLine initialization_logs = 4; // Initialization logs
                                              // if any that the
                                              // tracer has kept
                                              // around.
    repeated LogLine exception_logs = 5;      // Error/Warn logs if
                                              // any that the tracer
                                              // has kept around.
    repeated LogLine dump_logs = 6;           // Dump logs that were
                                              // triggered by this
                                              // flare.

}

message FlareLogResponse {
    bool continue = 1;      // Should the tracer continue to
                            // send logs?
    string stop_reason = 2; // Human readable reason why the
                            // tracer should stop sending
                            // logs.
}
