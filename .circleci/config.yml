version: 2.1 # Use version 2.1 to enable Orb usage.

orbs:
  win: circleci/windows@2.2.0 # The Windows orb give you everything you need to start using the Windows executor.

# This file uses YAML anchors to deduplicate steps
# see https://circleci.com/blog/circleci-hacks-reuse-yaml-in-your-circleci-config-with-yaml/
# and https://learnxinyminutes.com/docs/yaml/

experimental:
  # For some reason filtering out notifications keeps being undocumented and
  # marked as experimental but as of today, it's still working.
  notify:
    branches:
      only:
        - master

templates:
  job_template: &job_template
    docker:
      - image: datadog/datadog-agent-runner-circle:go1129-doxygen-golangci
        environment:
          USE_SYSTEM_LIBS: "1"
    working_directory: /go/src/github.com/DataDog/datadog-agent

  step_templates:
    - restore_cache: &restore_deps
        keys:
          # The first match will be used. Doing that so new branches
          # use master's cache but don't pollute it back.
          #
          # If incremental dep fails, increase the cache gen number
          # in restore_deps AND save_deps
          # See https://github.com/DataDog/datadog-agent/pull/2384
          - gen15-godeps-{{ .Branch }}-{{ .Revision }}
          - gen15-godeps-{{ .Branch }}-
          - gen15-godeps-master-
    - save_cache: &save_deps
        key: gen15-godeps-{{ .Branch }}-{{ .Revision }}
    - restore_cache: &restore_source
        keys:
          # Cache retrieval is faster than full git checkout
          - v4-repo-{{ .Revision }}
    - save_cache: &save_source
        key: v4-repo-{{ .Revision }}

jobs:
  checkout_code:
    docker:
      - image: alpine/git:latest
    working_directory: /go/src/github.com/DataDog/datadog-agent
    steps:
      - checkout
      - save_cache:
          <<: *save_source
          paths:
            - /go/src/github.com/DataDog/datadog-agent

  dependencies:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          name: setup python deps
          command: |
            pip install wheel
            pip install -r requirements.txt
      - run:
          name: grab go deps
          command: |
            inv deps --verbose --dep-vendor-only
      - run:
          name: build rtloader
          command: |
            inv rtloader.make --install-prefix=/go/src/github.com/DataDog/datadog-agent/dev
            inv rtloader.install
      - run:
          name: lint rtloader
          command: |
            inv rtloader.format --raise-if-changed
      - run:
          name: test rtloader
          command: |
            # remove base check before running tests, go on if pip fails
            pip uninstall datadog-checks-base -y || :
            inv rtloader.test
      - run:
          name: pre-compile go deps
          command: inv -e agent.build --exclude-rtloader --race --precompile-only
      - save_cache:
          <<: *save_deps
          paths:
            - /go/src/github.com/DataDog/datadog-agent/vendor
            - /go/src/github.com/DataDog/datadog-agent/dev
            - /go/pkg
            - /go/bin
            - /usr/local/lib/python2.7/dist-packages
            - /usr/local/bin

  unit_tests:
    <<: *job_template
    resource_class: large
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          name: run unit tests
          command: inv -e test --python-runtimes 3 --coverage --race --profile --fail-on-fmt --cpus 3
      - run:
          name: upload code coverage results
          # Never fail on coverage upload
          command: bash <(curl -s https://codecov.io/bash) -f profile.cov -F linux || true

  integration_tests:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - setup_remote_docker
      - run:
          name: run integration tests
          command: inv -e integration-tests --race --remote-docker

  release_note:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          command: inv -e lint-releasenote
          name: run PR check for release note

  team_label:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          command: inv -e lint-teamassignment
          name: run PR check for team assignment labels

  milestone:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          command: inv -e lint-milestone
          name: run PR check for milestone assignment

  filename_linting:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          name: run filename linting
          command: inv -e lint-filenames

  docker_tests:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - setup_remote_docker
      - run:
          name: run docker image tests
          command: inv -e docker.test
      - run:
          name: run docker image integration tests
          command: inv -e docker.integration-tests

  build_binaries:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          name: build dogstatsd
          command: inv -e dogstatsd.build --static
      - run:
          name: build agent
          command: inv -e agent.build --exclude-rtloader

  build_puppy:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          name: build puppy
          command: inv -e agent.build --puppy
      - run:
          name: test puppy
          command: ./bin/agent/agent -c ./bin/agent/dist check cpu

  documentation_generation:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          name: generate doxygen documentation
          command: inv -e rtloader.generate-doc

  windows_tests:
    executor: win/default
    environment:
      GOPATH: C:\gopath
      GOVERSION: '1.12.9'
      GOROOT: C:\go_1.12.9
      GOLANGCI_LINT_VERSION: "1.21.0"
      # Give hints to CMake to find Pythons
      Python2_ROOT_DIR: C:\tmp\Python27-x64
      Python3_ROOT_DIR: C:\tmp\Python38-x64
      PIP2: pip -q
      PIP3: pip3 -q
      MSYS_ROOT: C:\msys64
    working_directory: C:\gopath\src\github.com\DataDog\datadog-agent
    steps:
      - checkout
      - run: Write-Host "$MSYS_ROOT, $ENV:MSYS_ROOT, $ENV:GOROOT, $ENV:GOPATH, $ENV:PATH, $ENV:Python2_ROOT_DIR, $ENV:Python3_ROOT_DIR"
      - run:
          command: apt-get -h
          shell: bash.exe
      - run: Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
      - run: choco install msys2 --params "/InstallDir:$ENV:MSYS_ROOT"
      - run: C:\msys64\usr\bin\bash.exe -l -c "pacman -S --noconfirm make"
      - run: C:\msys64\usr\bin\bash.exe -l -c "gpg --recv-keys A105B0314272812B"
      - run: C:\msys64\usr\bin\bash.exe -l -c "pacman --noconfirm -U https://archive.archlinux.org/packages/g/gcc7/gcc7-7.2.1+20180116-1-x86_64.pkg.tar.xz"
      #- run: C:\msys64\usr\bin\bash.exe -l -c "pacman-key --recv-keys 39E4B877E62EB915 && pacman --noconfirm -U https://archive.archlinux.org/packages/g/gcc8/gcc8-8.3.0-1-x86_64.pkg.tar.xz"
      #- run: C:\msys64\usr\bin\bash.exe -l -c "pacman --noconfirm -U https://archive.archlinux.org/packages/g/gcc/gcc-9.3.0-1-x86_64.pkg.tar.zst"
      - run: tree $ENV:MSYS_ROOT
      - run:
          command: |
            $ENV:PATH = "C:\go\src\github.com\DataDog\datadog-agent\dev\lib;C:\tmp\cmake\bin;$ENV:GOROOT\bin;$ENV:GOPATH\bin;$ENV:Python2_ROOT_DIR;$ENV:Python2_ROOT_DIR\Scripts;$ENV:Python3_ROOT_DIR;$ENV:Python3_ROOT_DIR\Scripts;$ENV:MSYS_ROOT\mingw64\bin;$ENV:MSYS_ROOT\usr\bin\;$ENV:PATH"
            make -h
      - run: $Password = ConvertTo-SecureString "dummyPW_:-gch6Rejae9" -AsPlainText -Force; New-LocalUser -Name "ddagentuser" -Description "Test user for the secrets feature on windows." -Password $Password
      - run: $ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;(New-Object System.Net.WebClient).DownloadFile("https://github.com/Kitware/CMake/releases/download/v3.14.4/cmake-3.14.4-win64-x64.zip", "c:\tmp\cmake.zip")
      - run: '& 7z -o"C:\tmp\" x c:\tmp\cmake.zip'
      - run: Move-Item -Path c:\tmp\cmake-3.14.4-win64-x64 -Destination C:\tmp\cmake
      - run: $ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;(New-Object System.Net.WebClient).DownloadFile("https://dd-agent-omnibus.s3.amazonaws.com/python-windows-2.7.17-amd64.zip", "c:\tmp\python.zip")
      - run: '& 7z -o"$ENV:Python2_ROOT_DIR" x c:\tmp\python.zip'
      - run: $ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;(New-Object System.Net.WebClient).DownloadFile("https://dd-agent-omnibus.s3.amazonaws.com/python-windows-3.8.1-withcrt-amd64.zip", "c:\tmp\python3.zip")
      - run: '& 7z -o"$ENV:Python3_ROOT_DIR" x c:\tmp\python3.zip'
      - run: $ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;(New-Object System.Net.WebClient).DownloadFile("https://codeload.github.com/pypa/setuptools/tar.gz/v40.9.0", "c:\tmp\setuptools.tar.gz")
      - run: md C:\tmp\setuptools
      - run: '& tar zxfo c:\tmp\setuptools.tar.gz -C C:\tmp\setuptools'
      - run:
          command: |
            cd C:\tmp\setuptools\setuptools-40.9.0
            C:\tmp\Python27-x64\python.exe bootstrap.py
            C:\tmp\Python27-x64\python.exe setup.py install --prefix=$ENV:Python2_ROOT_DIR
            C:\tmp\Python38-x64\python.exe bootstrap.py
            C:\tmp\Python38-x64\python.exe setup.py install --prefix=$ENV:Python3_ROOT_DIR
      - run: $ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;(New-Object System.Net.WebClient).DownloadFile("https://codeload.github.com/pypa/pip/tar.gz/19.3.1", "c:\tmp\pip.tar.gz")
      - run: md C:\tmp\pip
      - run: '& tar zxfo c:\tmp\pip.tar.gz -C C:\tmp\pip'
      - run:
          command: |
            cd C:\tmp\pip\pip-19.3.1
            C:\tmp\Python27-x64\python.exe setup.py install --prefix=$ENV:Python2_ROOT_DIR
            C:\tmp\Python38-x64\python.exe setup.py install --prefix=$ENV:Python3_ROOT_DIR
      - run: Move-Item -Path C:\tmp\Python38-x64\python.exe -Destination C:\tmp\Python38-x64\python3.exe
      - run: $ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;(New-Object System.Net.WebClient).DownloadFile("https://dl.google.com/go/go$ENV:GOVERSION.windows-amd64.zip", "c:\tmp\godl.zip")
      - run: '& 7z -o"c:\tmp\go_$ENV:GOVERSION" x c:\tmp\godl.zip'
      - run: Move-Item -Path "C:\tmp\go_$ENV:GOVERSION\go" -Destination $ENV:GOROOT
      - run: $ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;(New-Object System.Net.WebClient).DownloadFile("https://github.com/golangci/golangci-lint/releases/download/v1.21.0/golangci-lint-$ENV:GOLANGCI_LINT_VERSION-windows-amd64.zip", "c:\tmp\golangci-lint.zip")
      - run: '& 7z -o"C:\tmp\golangci-lint\" x c:\tmp\golangci-lint.zip'
      - run: Move-Item -Path "C:\tmp\golangci-lint\golangci-lint-$ENV:GOLANGCI_LINT_VERSION-windows-amd64\golangci-lint.exe" -Destination $ENV:GOROOT\bin
      - run: git clone --depth 1 https://github.com/datadog/integrations-core
      - run:
          name: blah
          command: |
            $ENV:PATH = "C:\go\src\github.com\DataDog\datadog-agent\dev\lib;C:\tmp\cmake\bin;$ENV:GOROOT\bin;$ENV:GOPATH\bin;$ENV:Python2_ROOT_DIR;$ENV:Python2_ROOT_DIR\Scripts;$ENV:Python3_ROOT_DIR;$ENV:Python3_ROOT_DIR\Scripts;$ENV:MSYS_ROOT\mingw64\bin;$ENV:MSYS_ROOT\usr\bin\;$ENV:PATH"
            Write-Host "$ENV:PATH"
            python --version
            python3 --version
            go version
      - run:
          command: |
            $ENV:PATH = "C:\go\src\github.com\DataDog\datadog-agent\dev\lib;C:\tmp\cmake\bin;$ENV:GOROOT\bin;$ENV:GOPATH\bin;$ENV:Python2_ROOT_DIR;$ENV:Python2_ROOT_DIR\Scripts;$ENV:Python3_ROOT_DIR;$ENV:Python3_ROOT_DIR\Scripts;$ENV:MSYS_ROOT\mingw64\bin;$ENV:MSYS_ROOT\usr\bin\;$ENV:PATH"
            python -m pip install codecov -r requirements.txt
            python3 -m pip install -r requirements.txt
      - run:
          command: |
            $ENV:PATH = "C:\go\src\github.com\DataDog\datadog-agent\dev\lib;C:\tmp\cmake\bin;$ENV:GOROOT\bin;$ENV:GOPATH\bin;$ENV:Python2_ROOT_DIR;$ENV:Python2_ROOT_DIR\Scripts;$ENV:Python3_ROOT_DIR;$ENV:Python3_ROOT_DIR\Scripts;$ENV:MSYS_ROOT\mingw64\bin;$ENV:MSYS_ROOT\usr\bin\;$ENV:PATH"
            inv -e deps --verbose --no-dep-ensure --no-checks
      - run:
          command: |
            $ENV:PATH = "C:\go\src\github.com\DataDog\datadog-agent\dev\lib;C:\tmp\cmake\bin;$ENV:GOROOT\bin;$ENV:GOPATH\bin;$ENV:Python2_ROOT_DIR;$ENV:Python2_ROOT_DIR\Scripts;$ENV:Python3_ROOT_DIR;$ENV:Python3_ROOT_DIR\Scripts;$ENV:MSYS_ROOT\mingw64\bin;$ENV:MSYS_ROOT\usr\bin\;$ENV:PATH"
            dep ensure -v --vendor-only
      - run:
          command: |
            $ENV:PATH = "C:\go\src\github.com\DataDog\datadog-agent\dev\lib;C:\tmp\cmake\bin;$ENV:GOROOT\bin;$ENV:GOPATH\bin;$ENV:Python2_ROOT_DIR;$ENV:Python2_ROOT_DIR\Scripts;$ENV:Python3_ROOT_DIR;$ENV:Python3_ROOT_DIR\Scripts;$ENV:MSYS_ROOT\mingw64\bin;$ENV:MSYS_ROOT\usr\bin\;$ENV:PATH"
            inv -e rtloader.make --install-prefix=C:\go\src\github.com\DataDog\datadog-agent\dev --cmake-options="-G \""MSYS Makefiles\"""
      - run:
          command: |
            $ENV:PATH = "C:\go\src\github.com\DataDog\datadog-agent\dev\lib;C:\tmp\cmake\bin;$ENV:GOROOT\bin;$ENV:GOPATH\bin;$ENV:Python2_ROOT_DIR;$ENV:Python2_ROOT_DIR\Scripts;$ENV:Python3_ROOT_DIR;$ENV:Python3_ROOT_DIR\Scripts;$ENV:MSYS_ROOT\mingw64\bin;$ENV:MSYS_ROOT\usr\bin\;$ENV:PATH"
            inv -e rtloader.install
      - run:
          command: |
            $ENV:PATH = "C:\go\src\github.com\DataDog\datadog-agent\dev\lib;C:\tmp\cmake\bin;$ENV:GOROOT\bin;$ENV:GOPATH\bin;$ENV:Python2_ROOT_DIR;$ENV:Python2_ROOT_DIR\Scripts;$ENV:Python3_ROOT_DIR;$ENV:Python3_ROOT_DIR\Scripts;$ENV:MSYS_ROOT\mingw64\bin;$ENV:MSYS_ROOT\usr\bin\;$ENV:PATH"
            inv -e rtloader.format --raise-if-changed
      - run:
          command: |
            $ENV:PATH = "C:\go\src\github.com\DataDog\datadog-agent\dev\lib;C:\tmp\cmake\bin;$ENV:GOROOT\bin;$ENV:GOPATH\bin;$ENV:Python2_ROOT_DIR;$ENV:Python2_ROOT_DIR\Scripts;$ENV:Python3_ROOT_DIR;$ENV:Python3_ROOT_DIR\Scripts;$ENV:MSYS_ROOT\mingw64\bin;$ENV:MSYS_ROOT\usr\bin\;$ENV:PATH"
            inv -e rtloader.test
      - run:
          command: |
            $ENV:PATH = "C:\go\src\github.com\DataDog\datadog-agent\dev\lib;C:\tmp\cmake\bin;$ENV:GOROOT\bin;$ENV:GOPATH\bin;$ENV:Python2_ROOT_DIR;$ENV:Python2_ROOT_DIR\Scripts;$ENV:Python3_ROOT_DIR;$ENV:Python3_ROOT_DIR\Scripts;$ENV:MSYS_ROOT\mingw64\bin;$ENV:MSYS_ROOT\usr\bin\;$ENV:PATH"
            inv -e test --python-runtimes 3 --coverage --profile --fail-on-fmt --python-home-2=C:\tmp\Python27-x64 --python-home-3=C:\tmp\Python38-x64
      - run:
          command: |
            $ENV:PATH = "C:\go\src\github.com\DataDog\datadog-agent\dev\lib;C:\tmp\cmake\bin;$ENV:GOROOT\bin;$ENV:GOPATH\bin;$ENV:Python2_ROOT_DIR;$ENV:Python2_ROOT_DIR\Scripts;$ENV:Python3_ROOT_DIR;$ENV:Python3_ROOT_DIR\Scripts;$ENV:MSYS_ROOT\mingw64\bin;$ENV:MSYS_ROOT\usr\bin\;$ENV:PATH"
            codecov -f profile.cov -F windows

workflows:
  version: 2.1
  test_and_build:
    jobs:
      - checkout_code
      - windows_tests
      - dependencies:
          requires:
            - checkout_code
      - unit_tests:
          requires:
            - dependencies
      - integration_tests:
          requires:
            - dependencies
      - release_note:
          requires:
            - dependencies
      - team_label:
          requires:
            - dependencies
      - milestone:
          requires:
            - dependencies
      - filename_linting:
          requires:
            - dependencies
      - docker_tests:
          requires:
            - dependencies
      - documentation_generation:
          requires:
            - dependencies
      - build_binaries:
          requires:
            - unit_tests
            - integration_tests
            - docker_tests
      - build_puppy:
          requires:
            - unit_tests
            - integration_tests
            - docker_tests
