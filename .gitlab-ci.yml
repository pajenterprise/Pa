default:
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - api_failure

workflow:
  rules:
    - if: $CI_COMMIT_TAG =~ /^dca-/ || $CI_COMMIT_TAG == null || $DEPLOY_AGENT == "true"

variables:
  # The SRC_PATH is in the GOPATH of the builders which
  # currently is /go
  SRC_PATH: /go/src/github.com/DataDog/datadog-agent
  DATADOG_AGENT_BUILDIMAGES: v2894686-d80c3ce
  DATADOG_AGENT_ARMBUILDIMAGES: v2894686-d80c3ce
  DATADOG_AGENT_SYSPROBE_BUILDIMAGES: v2894686-d80c3ce
  BCC_VERSION: v0.12.0
  SYSTEM_PROBE_GO_VERSION: 1.14.7
  SYSTEM_PROBE_BINARIES_DIR: bin/system-probe
  DATADOG_AGENT_EMBEDDED_PATH: /opt/datadog-agent/embedded
  S3_CP_OPTIONS: --only-show-errors --region us-east-1 --sse AES256
  S3_CP_CMD: aws s3 cp $S3_CP_OPTIONS
  S3_ARTIFACTS_URI: s3://dd-ci-artefacts-build-stable/$CI_PROJECT_NAME/$CI_PIPELINE_ID

stages:
  - deps_build
  - system_probe_build
  - child_pipelines

# build libbcc
.build_libbcc_common:
  stage: deps_build
  script:
    - git clone -b "$BCC_VERSION" --depth=1 https://github.com/iovisor/bcc.git /tmp/bcc
    # Patch libbcc to remove references to glibc symbols with a too recent version
    - cd /tmp/bcc
    - patch -p1 < "$CI_PROJECT_DIR"/omnibus/config/software/libbcc_compat.patch
    - mkdir /tmp/bcc/build
    - cd /tmp/bcc/build
    - cmake .. -DCMAKE_INSTALL_PREFIX=/opt/libbcc -DCMAKE_EXE_LINKER_FLAGS="-Wl,-rpath,$DATADOG_AGENT_EMBEDDED_PATH/lib" -DCMAKE_SHARED_LINKER_FLAGS="-Wl,-rpath,$DATADOG_AGENT_EMBEDDED_PATH/lib"
    - make -j 4 #"$(nproc)"
    # Check that libbcc has no references to too recent glibc
    - objdump -p src/cc/libbcc.so | grep GLIBC_2.29 && exit 1
    - objdump -p src/cc/libbcc.so | grep GLIBC_2.26 && exit 1
    - make install
    - cd /opt/libbcc
    - chmod go-rwx lib/libbcc*
    - rm -rf share/bcc/examples share/bcc/introspection share/bcc/man share/bcc/tools lib/python2* lib/python3*
    - cp $(ldd lib/libbcc.so | awk '$1 ~ /^libtinfo/ {system("dirname " $3)}')/libtinfo* lib
    - tar cvaf /tmp/libbcc.tar.xz .
    - $S3_CP_CMD /tmp/libbcc.tar.xz $S3_ARTIFACTS_URI/libbcc-$ARCH.tar.xz

build_libbcc_x64:
  extends: .build_libbcc_common
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:main", "size:large" ]
  variables:
    ARCH: amd64

build_libbcc_arm64:
  extends: .build_libbcc_common
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_arm64:$DATADOG_AGENT_ARMBUILDIMAGES
  tags: ["runner:docker-arm", "platform:arm64"]
  variables:
    ARCH: arm64

.system-probe_build_common:
  stage: system_probe_build
  before_script:
    # Hack to work around the cloning issue with arm runners
    - mkdir -p $GOPATH/src/github.com/DataDog
    - '[[ "$ARCH" == arm64 ]] && cp -R $GOPATH/src/github.com/*/*/DataDog/datadog-agent $GOPATH/src/github.com/DataDog'
    - cd $SRC_PATH
    # HACK: empty the build directory cache (that can come from previous runs)
    #       to not have remainders of previous runs, which can make our deps bootstrapping logic fail.
    # TODO: remove this once we switch to k8s runners, they won't have this problem
    - find "$CI_BUILDS_DIR" ! -path '*DataDog/datadog-agent*' -depth # -delete implies -depth
    - find "$CI_BUILDS_DIR" ! -path '*DataDog/datadog-agent*' -delete || true # Allow failure, we can't remove parent folders of datadog-agent
    - inv -e deps --verbose
    # Retrieve libbcc from S3
    - $S3_CP_CMD $S3_ARTIFACTS_URI/libbcc-$ARCH.tar.xz /tmp/libbcc.tar.xz
    - mkdir -p $DATADOG_AGENT_EMBEDDED_PATH
    - tar -xvf /tmp/libbcc.tar.xz -C $DATADOG_AGENT_EMBEDDED_PATH

  script:
    - inv -e system-probe.build --go-version=$SYSTEM_PROBE_GO_VERSION --embedded-path=$DATADOG_AGENT_EMBEDDED_PATH
    - inv -e system-probe.test --only-check-bpf-bytes
    - $S3_CP_CMD $SRC_PATH/$SYSTEM_PROBE_BINARIES_DIR/system-probe $S3_ARTIFACTS_URI/system-probe.$ARCH
    - $S3_CP_CMD $SRC_PATH/pkg/ebpf/c/tracer-ebpf.o $S3_ARTIFACTS_URI/tracer-ebpf.o.$ARCH
    - $S3_CP_CMD $SRC_PATH/pkg/ebpf/c/tracer-ebpf-debug.o $S3_ARTIFACTS_URI/tracer-ebpf-debug.o.$ARCH
    - $S3_CP_CMD $SRC_PATH/pkg/ebpf/c/offset-guess.o $S3_ARTIFACTS_URI/offset-guess.o.$ARCH
    - $S3_CP_CMD $SRC_PATH/pkg/ebpf/c/offset-guess-debug.o $S3_ARTIFACTS_URI/offset-guess-debug.o.$ARCH
    - $S3_CP_CMD $SRC_PATH/pkg/security/ebpf/c/runtime-security.o $S3_ARTIFACTS_URI/runtime-security.o.$ARCH
    - $S3_CP_CMD $SRC_PATH/pkg/security/ebpf/c/runtime-security-syscall-wrapper.o $S3_ARTIFACTS_URI/runtime-security-syscall-wrapper.o.$ARCH

build_system-probe-x64:
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_x64:$DATADOG_AGENT_SYSPROBE_BUILDIMAGES
  needs: [ "build_libbcc_x64" ]
  tags: [ "runner:main", "size:large" ]
  extends: .system-probe_build_common
  variables:
    ARCH: amd64

build_system-probe-arm64:
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_arm64:$DATADOG_AGENT_SYSPROBE_BUILDIMAGES
  needs: [ "build_libbcc_arm64" ]
  tags: ["runner:docker-arm", "platform:arm64"]
  extends: .system-probe_build_common
  variables:
    ARCH: arm64

deb_x64:
  stage: child_pipelines
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  trigger:
    include: .gitlab/deb_x64.yml
    strategy: depend
  needs: [ "build_libbcc_x64", "build_system-probe-x64" ]

rpm_x64:
  stage: child_pipelines
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  trigger:
    include: .gitlab/rpm_x64.yml
    strategy: depend
  needs: [ "build_libbcc_x64", "build_system-probe-x64" ]

suse_x64:
  stage: child_pipelines
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  trigger:
    include: .gitlab/suse_x64.yml
    strategy: depend
  needs: [ "build_libbcc_x64", "build_system-probe-x64" ]

deb_arm64:
  stage: child_pipelines
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  trigger:
    include: .gitlab/deb_arm64.yml
    strategy: depend
  needs: [ "build_libbcc_arm64", "build_system-probe-arm64" ]

rpm_arm64:
  stage: child_pipelines
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  trigger:
    include: .gitlab/rpm_arm64.yml
    strategy: depend
  needs: [ "build_libbcc_arm64", "build_system-probe-arm64" ]

deb_armhf:
  stage: child_pipelines
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  trigger:
    include: .gitlab/deb_armhf.yml
    strategy: depend

rpm_armhf:
  stage: child_pipelines
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  trigger:
    include: .gitlab/rpm_armhf.yml
    strategy: depend

# Note: cross-pipeline artifact download is only available in paid editions of gitlab:
# https://docs.gitlab.com/13.4/ee/ci/yaml/README.html#cross-project-artifact-downloads-with-needs

# Downloading artifacts from parent pipeline is not available:
# https://gitlab.com/gitlab-org/gitlab/-/issues/213457
