include: 
  - '/.gitlab/utils/main.yml'
  - '/.gitlab/utils/kitchen.yml'

stages:
  - source_tests
  - binary_build
  - package_build
  # - testkitchen_deploy
  # - testkitchen_test

#
# Source tests
#

.run_tests_preparation:
  before_script:
    - source /root/.bashrc && conda activate $CONDA_ENV
    - pip install wheel
    - pip install -r requirements.txt
    - go get gopkg.in/yaml.v2
    - go get github.com/stretchr/testify
    - inv -e rtloader.make --install-prefix=$SRC_PATH/dev --python-runtimes "$PYTHON_RUNTIMES"
    - inv -e rtloader.install
    - inv -e rtloader.format --raise-if-changed
    - inv -e rtloader.test
    - inv -e deps --verbose --dep-vendor-only

run_tests_deb-x64-py2:
  extends: .run_tests_preparation
  stage: source_tests
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:main", "size:2xlarge" ]
  variables:
    PYTHON_RUNTIMES: '2'
    CONDA_ENV: ddpy2
  script:
    - inv -e test --race --profile --python-runtimes "$PYTHON_RUNTIMES" --cpus 4

run_tests_deb-x64-py3:
  extends: .run_tests_preparation
  stage: source_tests
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:main", "size:2xlarge" ]
  variables:
    PYTHON_RUNTIMES: '3'
    CONDA_ENV: ddpy3
  script:
    - inv -e test --race --profile --python-runtimes "$PYTHON_RUNTIMES" --cpus 4

#
# Binary build
#

build_dogstatsd_static-deb_x64:
  stage: binary_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:main", "size:large" ]
  needs: [ "run_tests_deb-x64-py3" ]
  before_script:
    - source /root/.bashrc && conda activate ddpy3
    - inv -e deps --no-checks --verbose --dep-vendor-only
  script:
    - inv -e dogstatsd.build --static --major-version 7
    - $S3_CP_CMD $SRC_PATH/$STATIC_BINARIES_DIR/dogstatsd $S3_ARTIFACTS_URI/static/dogstatsd

# build dogstatsd for deb-x64
build_dogstatsd-deb_x64:
  stage: binary_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:main", "size:large" ]
  needs: [ "run_tests_deb-x64-py3" ]
  before_script:
    - source /root/.bashrc && conda activate ddpy3
    - inv -e deps --no-checks --verbose --dep-vendor-only
  script:
    - inv -e dogstatsd.build --major-version 7
    - $S3_CP_CMD $SRC_PATH/$DOGSTATSD_BINARIES_DIR/dogstatsd $S3_ARTIFACTS_URI/dogstatsd/dogstatsd

build_dogstatsd_static-deb_arm64:
  stage: binary_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_arm64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:docker-arm", "platform:arm64" ]
  needs: [ "run_tests_deb-x64-py3" ]
  variables:
    ARCH: arm64
  before_script:
    - source /root/.bashrc
    # Hack to work around the cloning issue with arm runners
    - mkdir -p $GOPATH/src/github.com/DataDog
    - cp -R $GOPATH/src/github.com/*/*/DataDog/datadog-agent $GOPATH/src/github.com/DataDog
    - cd $SRC_PATH
    - inv -e deps --no-checks --verbose --dep-vendor-only
  script:
    - inv -e dogstatsd.build --static --major-version 7
    - $S3_CP_CMD $SRC_PATH/$STATIC_BINARIES_DIR/dogstatsd $S3_ARTIFACTS_URI/static/dogstatsd.$ARCH

build_dogstatsd-deb_arm64:
  stage: binary_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_arm64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:docker-arm", "platform:arm64" ]
  needs: [ "run_tests_deb-x64-py3" ]
  variables:
    ARCH: arm64
  before_script:
    - source /root/.bashrc
    # Hack to work around the cloning issue with arm runners
    - mkdir -p $GOPATH/src/github.com/DataDog
    - cp -R $GOPATH/src/github.com/*/*/DataDog/datadog-agent $GOPATH/src/github.com/DataDog
    - cd $SRC_PATH
    - inv -e deps --no-checks --verbose --dep-vendor-only
  script:
    - inv -e dogstatsd.build --major-version 7
    - $S3_CP_CMD $SRC_PATH/$DOGSTATSD_BINARIES_DIR/dogstatsd $S3_ARTIFACTS_URI/dogstatsd/dogstatsd.$ARCH

# build iot agent for deb-x64, to make sure the build is not broken because of build flags
build_iot_agent-deb_x64:
  stage: binary_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:main", "size:large" ]
  needs: [ "run_tests_deb-x64-py3" ]
  before_script:
    - source /root/.bashrc && conda activate ddpy3
    - inv -e deps --verbose --dep-vendor-only --no-checks
  script:
    - inv -e agent.build --iot --major-version 7
    - $S3_CP_CMD $SRC_PATH/$AGENT_BINARIES_DIR/agent $S3_ARTIFACTS_URI/iot/agent

# build iot agent for ARM, to make sure the build is not broken because of build targets
build_iot_agent-deb_arm64:
  stage: binary_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_arm64:$DATADOG_AGENT_BUILDIMAGES
  tags: ["runner:docker-arm", "platform:arm64"]
  needs: [ "run_tests_deb-x64-py3" ]
  variables:
    ARCH: arm64
  before_script:
    - source /root/.bashrc
    # Hack to work around the cloning issue with arm runners
    - mkdir -p $GOPATH/src/github.com/DataDog
    - cp -R $GOPATH/src/github.com/*/*/DataDog/datadog-agent $GOPATH/src/github.com/DataDog
    - cd $SRC_PATH
    - inv -e deps --verbose --dep-vendor-only --no-checks
  script:
    - inv -e agent.build --iot --major-version 7

#
# Package build
#

# TODO: enabling the cache cause builds to be slower and slower on `master`. Re-enable once this is investigated/fixed
# cache:
#   # cache per branch
#   key: $CI_COMMIT_REF_NAME
#   paths:
#     - $OMNIBUS_BASE_DIR

.agent_build_common_deb:
  script:
    - echo "About to build for $RELEASE_VERSION"
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
    # Thus, we move the artifacts at the end in a gitlab-friendly dir.
    # Use --skip-deps since the deps are installed by `before_script`.
    - $S3_CP_CMD $S3_ARTIFACTS_URI/system-probe.${PACKAGE_ARCH} /tmp/system-probe
    - chmod 755 /tmp/system-probe
    - inv -e agent.omnibus-build --release-version "$RELEASE_VERSION" --major-version "$AGENT_MAJOR_VERSION" --python-runtimes "$PYTHON_RUNTIMES" --base-dir $OMNIBUS_BASE_DIR ${USE_S3_CACHING} --skip-deps --system-probe-bin=/tmp/system-probe --no-with-bcc
    - $S3_CP_CMD $OMNIBUS_BASE_DIR/pkg/datadog-agent_*_${PACKAGE_ARCH}.deb $S3_ARTIFACTS_URI/$DESTINATION_DEB
    - $S3_CP_CMD $OMNIBUS_BASE_DIR/pkg/datadog-agent-dbg_*_${PACKAGE_ARCH}.deb $S3_ARTIFACTS_URI/$DESTINATION_DBG_DEB
    - mkdir -p $OMNIBUS_PACKAGE_DIR && cp $OMNIBUS_BASE_DIR/pkg/datadog-agent*_${PACKAGE_ARCH}.deb{,.metadata.json} $OMNIBUS_PACKAGE_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR

.agent_with-bcc_build_common_deb:
  script:
    - echo "About to build for $RELEASE_VERSION"
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
    # Thus, we move the artifacts at the end in a gitlab-friendly dir.
    # Use --skip-deps since the deps are installed by `before_script`.
    - $S3_CP_CMD $S3_ARTIFACTS_URI/system-probe.with-bcc.${PACKAGE_ARCH} /tmp/system-probe
    - chmod 755 /tmp/system-probe
    - $S3_CP_CMD $S3_ARTIFACTS_URI/libbcc-${PACKAGE_ARCH}.tar.xz /tmp/libbcc.tar.xz
    - inv -e agent.omnibus-build --release-version "$RELEASE_VERSION" --major-version "$AGENT_MAJOR_VERSION" --python-runtimes "$PYTHON_RUNTIMES" --base-dir $OMNIBUS_BASE_DIR ${USE_S3_CACHING} --skip-deps --system-probe-bin=/tmp/system-probe --libbcc-tarball=/tmp/libbcc.tar.xz
    - $S3_CP_CMD $OMNIBUS_BASE_DIR/pkg/datadog-agent_*_${PACKAGE_ARCH}.deb $S3_ARTIFACTS_URI/$DESTINATION_DEB
    - $S3_CP_CMD $OMNIBUS_BASE_DIR/pkg/datadog-agent-dbg_*_${PACKAGE_ARCH}.deb $S3_ARTIFACTS_URI/$DESTINATION_DBG_DEB
    - mkdir -p $OMNIBUS_PACKAGE_DIR && cp $OMNIBUS_BASE_DIR/pkg/datadog-agent*_${PACKAGE_ARCH}.deb{,.metadata.json} $OMNIBUS_PACKAGE_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR

agent_deb-x64-a6:
  extends:
    - .skip_when_unwanted_on_6
    - .agent_build_common_deb
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:main", "size:2xlarge" ]
  needs: [ "run_tests_deb-x64-py2", "run_tests_deb-x64-py3", "build_system-probe-x64" ]
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
    CONDA_ENV: ddpy3
    AGENT_MAJOR_VERSION: 6
    PYTHON_RUNTIMES: '2,3'
    PACKAGE_ARCH: amd64
    DESTINATION_DEB: 'datadog-agent_6_amd64.deb'
    DESTINATION_DBG_DEB: 'datadog-agent-dbg_6_amd64.deb'
  before_script:
    - source /root/.bashrc && conda activate $CONDA_ENV
    - inv -e deps --no-checks --verbose --dep-vendor-only
    - export RELEASE_VERSION=$RELEASE_VERSION_6


agent_deb-x64-a7:
  extends:
    - .skip_when_unwanted_on_7
    - .agent_build_common_deb
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:main", "size:2xlarge" ]
  needs: [ "run_tests_deb-x64-py3", "build_system-probe-x64" ]
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
    CONDA_ENV: ddpy3
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: '3'
    PACKAGE_ARCH: amd64
    DESTINATION_DEB: 'datadog-agent_7_amd64.deb'
    DESTINATION_DBG_DEB: 'datadog-agent-dbg_7_amd64.deb'
  before_script:
    - source /root/.bashrc && conda activate $CONDA_ENV
    - inv -e deps --no-checks --verbose --dep-vendor-only
    - export RELEASE_VERSION=$RELEASE_VERSION_7

agent_with-bcc_deb-x64-a7:
  extends:
    - .skip_when_unwanted_on_7
    - .agent_build_common_deb
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:main", "size:2xlarge" ]
  needs: [ "run_tests_deb-x64-py3", "build_system-probe_with-bcc-x64" ]
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
    CONDA_ENV: ddpy3
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: '3'
    PACKAGE_ARCH: amd64
    DESTINATION_DEB: 'datadog-agent-with-bcc_7_amd64.deb'
    DESTINATION_DBG_DEB: 'datadog-agent-with-bcc-dbg_7_amd64.deb'
  before_script:
    - source /root/.bashrc && conda activate $CONDA_ENV
    - inv -e deps --no-checks --verbose --dep-vendor-only
    - export RELEASE_VERSION=$RELEASE_VERSION_7

agent_deb-arm-a6:
  extends:
    - .skip_when_unwanted_on_6
    - .agent_build_common_deb
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_arm64:$DATADOG_AGENT_ARMBUILDIMAGES
  tags: [ "runner:docker-arm", "platform:arm64" ]
  needs: [ "build_system-probe-arm64" ]
  variables:
    AGENT_MAJOR_VERSION: 6
    PYTHON_RUNTIMES: '2,3'
    PACKAGE_ARCH: arm64
    DESTINATION_DEB: 'datadog-agent_6_arm64.deb'
    DESTINATION_DBG_DEB: 'datadog-agent-dbg_6_arm64.deb'
  before_script:
    - source /root/.bashrc
    - inv -e deps --no-checks --verbose --dep-vendor-only
    - export RELEASE_VERSION=$RELEASE_VERSION_6

agent_deb-arm-a7:
  extends:
    - .skip_when_unwanted_on_7
    - .agent_build_common_deb
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_arm64:$DATADOG_AGENT_ARMBUILDIMAGES
  tags: [ "runner:docker-arm", "platform:arm64" ]
  needs: [ "build_system-probe-arm64" ]
  variables:
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: '3'
    PACKAGE_ARCH: arm64
    DESTINATION_DEB: 'datadog-agent_7_arm64.deb'
    DESTINATION_DBG_DEB: 'datadog-agent-dbg_7_arm64.deb'
  before_script:
    - source /root/.bashrc
    - inv -e deps --no-checks --verbose --dep-vendor-only
    - export RELEASE_VERSION=$RELEASE_VERSION_7

# build Agent package for deb-x64
iot_agent_deb-x64:
  extends: .skip_when_unwanted_on_7
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [ "runner:main", "size:2xlarge" ]
  needs: [ "build_iot_agent-deb_x64" ]
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
    PACKAGE_ARCH: amd64
  before_script:
    - source /root/.bashrc && conda activate ddpy3
    - inv -e deps --verbose --dep-vendor-only --no-checks
  script:
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
    # Thus, we move the artifacts at the end in a gitlab-friendly dir.
    # Use --skip-deps since the deps are installed by `before_script`.
    - inv -e agent.omnibus-build --iot --log-level debug --release-version "$RELEASE_VERSION_7" --major-version 7 --base-dir $OMNIBUS_BASE_DIR --skip-deps
    - find $OMNIBUS_BASE_DIR/pkg -name "datadog-iot-agent*_amd64.deb" -exec dpkg -c {} \;
    - $S3_CP_CMD $OMNIBUS_BASE_DIR/pkg/datadog-iot-agent*_amd64.deb $S3_ARTIFACTS_URI/datadog-iot-agent_amd64.deb
    - mkdir -p $OMNIBUS_PACKAGE_DIR && cp $OMNIBUS_BASE_DIR/pkg/datadog-iot-agent*_amd64.deb{,.metadata.json} $OMNIBUS_PACKAGE_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR

iot_agent_deb-arm64:
  extends: .skip_when_unwanted_on_7
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_arm64:$DATADOG_AGENT_ARMBUILDIMAGES
  tags: [ "runner:docker-arm", "platform:arm64" ]
  needs: [ "build_iot_agent-deb_arm64" ]
  variables:
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: '3'
  before_script:
    - source /root/.bashrc
    - inv -e deps --verbose --dep-vendor-only
    - export RELEASE_VERSION=$RELEASE_VERSION_7
  script:
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
    # Thus, we move the artifacts at the end in a gitlab-friendly dir.
    # Use --skip-deps since the deps are installed by `before_script`.
    - inv -e agent.omnibus-build --iot --log-level debug --release-version "$RELEASE_VERSION_7" --major-version 7 --base-dir $OMNIBUS_BASE_DIR --skip-deps
    - find $OMNIBUS_BASE_DIR/pkg
    - find $OMNIBUS_BASE_DIR/pkg -name "datadog-iot-agent*_arm64.deb" -exec dpkg -c {} \;
    - $S3_CP_CMD $OMNIBUS_BASE_DIR/pkg/datadog-iot-agent*_arm64.deb $S3_ARTIFACTS_URI/datadog-iot-agent_arm64.deb
    - mkdir -p $OMNIBUS_PACKAGE_DIR && cp $OMNIBUS_BASE_DIR/pkg/datadog-iot-agent*_arm64.deb{,.metadata.json} $OMNIBUS_PACKAGE_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR
