// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plugin.proto

package agentplugin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServiceCheckStatus int32

const (
	ServiceCheckStatus_OK       ServiceCheckStatus = 0
	ServiceCheckStatus_WARNING  ServiceCheckStatus = 1
	ServiceCheckStatus_CRITICAL ServiceCheckStatus = 2
	ServiceCheckStatus_UNKNOWN  ServiceCheckStatus = 3
)

var ServiceCheckStatus_name = map[int32]string{
	0: "OK",
	1: "WARNING",
	2: "CRITICAL",
	3: "UNKNOWN",
}
var ServiceCheckStatus_value = map[string]int32{
	"OK":       0,
	"WARNING":  1,
	"CRITICAL": 2,
	"UNKNOWN":  3,
}

func (x ServiceCheckStatus) String() string {
	return proto.EnumName(ServiceCheckStatus_name, int32(x))
}
func (ServiceCheckStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_plugin_40b3cf2aa369b064, []int{0}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_40b3cf2aa369b064, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type InitData struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	InitConfig           []byte   `protobuf:"bytes,2,opt,name=init_config,json=initConfig,proto3" json:"init_config,omitempty"`
	Instances            [][]byte `protobuf:"bytes,3,rep,name=instances,proto3" json:"instances,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitData) Reset()         { *m = InitData{} }
func (m *InitData) String() string { return proto.CompactTextString(m) }
func (*InitData) ProtoMessage()    {}
func (*InitData) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_40b3cf2aa369b064, []int{1}
}
func (m *InitData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitData.Unmarshal(m, b)
}
func (m *InitData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitData.Marshal(b, m, deterministic)
}
func (dst *InitData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitData.Merge(dst, src)
}
func (m *InitData) XXX_Size() int {
	return xxx_messageInfo_InitData.Size(m)
}
func (m *InitData) XXX_DiscardUnknown() {
	xxx_messageInfo_InitData.DiscardUnknown(m)
}

var xxx_messageInfo_InitData proto.InternalMessageInfo

func (m *InitData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InitData) GetInitConfig() []byte {
	if m != nil {
		return m.InitConfig
	}
	return nil
}

func (m *InitData) GetInstances() [][]byte {
	if m != nil {
		return m.Instances
	}
	return nil
}

type RunData struct {
	SenderHandle         uint32   `protobuf:"varint,1,opt,name=sender_handle,json=senderHandle" json:"sender_handle,omitempty"`
	Instance             []byte   `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunData) Reset()         { *m = RunData{} }
func (m *RunData) String() string { return proto.CompactTextString(m) }
func (*RunData) ProtoMessage()    {}
func (*RunData) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_40b3cf2aa369b064, []int{2}
}
func (m *RunData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunData.Unmarshal(m, b)
}
func (m *RunData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunData.Marshal(b, m, deterministic)
}
func (dst *RunData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunData.Merge(dst, src)
}
func (m *RunData) XXX_Size() int {
	return xxx_messageInfo_RunData.Size(m)
}
func (m *RunData) XXX_DiscardUnknown() {
	xxx_messageInfo_RunData.DiscardUnknown(m)
}

var xxx_messageInfo_RunData proto.InternalMessageInfo

func (m *RunData) GetSenderHandle() uint32 {
	if m != nil {
		return m.SenderHandle
	}
	return 0
}

func (m *RunData) GetInstance() []byte {
	if m != nil {
		return m.Instance
	}
	return nil
}

type MetricData struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value                float64  `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
	Tags                 []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricData) Reset()         { *m = MetricData{} }
func (m *MetricData) String() string { return proto.CompactTextString(m) }
func (*MetricData) ProtoMessage()    {}
func (*MetricData) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_40b3cf2aa369b064, []int{3}
}
func (m *MetricData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricData.Unmarshal(m, b)
}
func (m *MetricData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricData.Marshal(b, m, deterministic)
}
func (dst *MetricData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricData.Merge(dst, src)
}
func (m *MetricData) XXX_Size() int {
	return xxx_messageInfo_MetricData.Size(m)
}
func (m *MetricData) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricData.DiscardUnknown(m)
}

var xxx_messageInfo_MetricData proto.InternalMessageInfo

func (m *MetricData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricData) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *MetricData) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ServiceCheckData struct {
	Name                 string             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Status               ServiceCheckStatus `protobuf:"varint,2,opt,name=status,enum=agentplugin.ServiceCheckStatus" json:"status,omitempty"`
	Tags                 []string           `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	Message              string             `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ServiceCheckData) Reset()         { *m = ServiceCheckData{} }
func (m *ServiceCheckData) String() string { return proto.CompactTextString(m) }
func (*ServiceCheckData) ProtoMessage()    {}
func (*ServiceCheckData) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_40b3cf2aa369b064, []int{4}
}
func (m *ServiceCheckData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceCheckData.Unmarshal(m, b)
}
func (m *ServiceCheckData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceCheckData.Marshal(b, m, deterministic)
}
func (dst *ServiceCheckData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceCheckData.Merge(dst, src)
}
func (m *ServiceCheckData) XXX_Size() int {
	return xxx_messageInfo_ServiceCheckData.Size(m)
}
func (m *ServiceCheckData) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceCheckData.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceCheckData proto.InternalMessageInfo

func (m *ServiceCheckData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceCheckData) GetStatus() ServiceCheckStatus {
	if m != nil {
		return m.Status
	}
	return ServiceCheckStatus_OK
}

func (m *ServiceCheckData) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ServiceCheckData) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "agentplugin.Empty")
	proto.RegisterType((*InitData)(nil), "agentplugin.InitData")
	proto.RegisterType((*RunData)(nil), "agentplugin.RunData")
	proto.RegisterType((*MetricData)(nil), "agentplugin.MetricData")
	proto.RegisterType((*ServiceCheckData)(nil), "agentplugin.ServiceCheckData")
	proto.RegisterEnum("agentplugin.ServiceCheckStatus", ServiceCheckStatus_name, ServiceCheckStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Integration service

type IntegrationClient interface {
	Init(ctx context.Context, in *InitData, opts ...grpc.CallOption) (*Empty, error)
	Run(ctx context.Context, in *RunData, opts ...grpc.CallOption) (*Empty, error)
}

type integrationClient struct {
	cc *grpc.ClientConn
}

func NewIntegrationClient(cc *grpc.ClientConn) IntegrationClient {
	return &integrationClient{cc}
}

func (c *integrationClient) Init(ctx context.Context, in *InitData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/agentplugin.Integration/Init", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationClient) Run(ctx context.Context, in *RunData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/agentplugin.Integration/Run", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Integration service

type IntegrationServer interface {
	Init(context.Context, *InitData) (*Empty, error)
	Run(context.Context, *RunData) (*Empty, error)
}

func RegisterIntegrationServer(s *grpc.Server, srv IntegrationServer) {
	s.RegisterService(&_Integration_serviceDesc, srv)
}

func _Integration_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentplugin.Integration/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServer).Init(ctx, req.(*InitData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integration_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentplugin.Integration/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServer).Run(ctx, req.(*RunData))
	}
	return interceptor(ctx, in, info, handler)
}

var _Integration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agentplugin.Integration",
	HandlerType: (*IntegrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _Integration_Init_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _Integration_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}

// Client API for SenderHelper service

type SenderHelperClient interface {
	Gauge(ctx context.Context, in *MetricData, opts ...grpc.CallOption) (*Empty, error)
	Rate(ctx context.Context, in *MetricData, opts ...grpc.CallOption) (*Empty, error)
	Count(ctx context.Context, in *MetricData, opts ...grpc.CallOption) (*Empty, error)
	MonotonicCount(ctx context.Context, in *MetricData, opts ...grpc.CallOption) (*Empty, error)
	Counter(ctx context.Context, in *MetricData, opts ...grpc.CallOption) (*Empty, error)
	Histogram(ctx context.Context, in *MetricData, opts ...grpc.CallOption) (*Empty, error)
	Historate(ctx context.Context, in *MetricData, opts ...grpc.CallOption) (*Empty, error)
	ServiceCheck(ctx context.Context, in *ServiceCheckData, opts ...grpc.CallOption) (*Empty, error)
}

type senderHelperClient struct {
	cc *grpc.ClientConn
}

func NewSenderHelperClient(cc *grpc.ClientConn) SenderHelperClient {
	return &senderHelperClient{cc}
}

func (c *senderHelperClient) Gauge(ctx context.Context, in *MetricData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/agentplugin.SenderHelper/Gauge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senderHelperClient) Rate(ctx context.Context, in *MetricData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/agentplugin.SenderHelper/Rate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senderHelperClient) Count(ctx context.Context, in *MetricData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/agentplugin.SenderHelper/Count", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senderHelperClient) MonotonicCount(ctx context.Context, in *MetricData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/agentplugin.SenderHelper/MonotonicCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senderHelperClient) Counter(ctx context.Context, in *MetricData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/agentplugin.SenderHelper/Counter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senderHelperClient) Histogram(ctx context.Context, in *MetricData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/agentplugin.SenderHelper/Histogram", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senderHelperClient) Historate(ctx context.Context, in *MetricData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/agentplugin.SenderHelper/Historate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senderHelperClient) ServiceCheck(ctx context.Context, in *ServiceCheckData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/agentplugin.SenderHelper/ServiceCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SenderHelper service

type SenderHelperServer interface {
	Gauge(context.Context, *MetricData) (*Empty, error)
	Rate(context.Context, *MetricData) (*Empty, error)
	Count(context.Context, *MetricData) (*Empty, error)
	MonotonicCount(context.Context, *MetricData) (*Empty, error)
	Counter(context.Context, *MetricData) (*Empty, error)
	Histogram(context.Context, *MetricData) (*Empty, error)
	Historate(context.Context, *MetricData) (*Empty, error)
	ServiceCheck(context.Context, *ServiceCheckData) (*Empty, error)
}

func RegisterSenderHelperServer(s *grpc.Server, srv SenderHelperServer) {
	s.RegisterService(&_SenderHelper_serviceDesc, srv)
}

func _SenderHelper_Gauge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderHelperServer).Gauge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentplugin.SenderHelper/Gauge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderHelperServer).Gauge(ctx, req.(*MetricData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SenderHelper_Rate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderHelperServer).Rate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentplugin.SenderHelper/Rate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderHelperServer).Rate(ctx, req.(*MetricData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SenderHelper_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderHelperServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentplugin.SenderHelper/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderHelperServer).Count(ctx, req.(*MetricData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SenderHelper_MonotonicCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderHelperServer).MonotonicCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentplugin.SenderHelper/MonotonicCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderHelperServer).MonotonicCount(ctx, req.(*MetricData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SenderHelper_Counter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderHelperServer).Counter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentplugin.SenderHelper/Counter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderHelperServer).Counter(ctx, req.(*MetricData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SenderHelper_Histogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderHelperServer).Histogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentplugin.SenderHelper/Histogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderHelperServer).Histogram(ctx, req.(*MetricData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SenderHelper_Historate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderHelperServer).Historate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentplugin.SenderHelper/Historate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderHelperServer).Historate(ctx, req.(*MetricData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SenderHelper_ServiceCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCheckData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderHelperServer).ServiceCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentplugin.SenderHelper/ServiceCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderHelperServer).ServiceCheck(ctx, req.(*ServiceCheckData))
	}
	return interceptor(ctx, in, info, handler)
}

var _SenderHelper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agentplugin.SenderHelper",
	HandlerType: (*SenderHelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Gauge",
			Handler:    _SenderHelper_Gauge_Handler,
		},
		{
			MethodName: "Rate",
			Handler:    _SenderHelper_Rate_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _SenderHelper_Count_Handler,
		},
		{
			MethodName: "MonotonicCount",
			Handler:    _SenderHelper_MonotonicCount_Handler,
		},
		{
			MethodName: "Counter",
			Handler:    _SenderHelper_Counter_Handler,
		},
		{
			MethodName: "Histogram",
			Handler:    _SenderHelper_Histogram_Handler,
		},
		{
			MethodName: "Historate",
			Handler:    _SenderHelper_Historate_Handler,
		},
		{
			MethodName: "ServiceCheck",
			Handler:    _SenderHelper_ServiceCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}

func init() { proto.RegisterFile("plugin.proto", fileDescriptor_plugin_40b3cf2aa369b064) }

var fileDescriptor_plugin_40b3cf2aa369b064 = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xc5, 0x75, 0x12, 0x27, 0x13, 0xb7, 0xb2, 0x46, 0x45, 0x58, 0x15, 0xa8, 0x91, 0xb9, 0x44,
	0x1c, 0x82, 0x48, 0x2b, 0xe0, 0xc2, 0x21, 0x72, 0x51, 0xeb, 0x96, 0xba, 0xd2, 0x06, 0xd4, 0x13,
	0xaa, 0x16, 0x77, 0x71, 0x57, 0x24, 0xbb, 0x61, 0x3d, 0xae, 0xc4, 0x47, 0xf0, 0x89, 0xfc, 0x0b,
	0xf2, 0x3a, 0x21, 0x8d, 0x48, 0x0e, 0xe9, 0x6d, 0xe7, 0xed, 0xbc, 0xf7, 0x46, 0xfb, 0x46, 0x0b,
	0xfe, 0x6c, 0x52, 0xe6, 0x52, 0x0d, 0x66, 0x46, 0x93, 0xc6, 0x2e, 0xcf, 0x85, 0xa2, 0x1a, 0x8a,
	0x3c, 0x68, 0x7e, 0x9c, 0xce, 0xe8, 0x57, 0xf4, 0x15, 0xda, 0x89, 0x92, 0x74, 0xc2, 0x89, 0x23,
	0x42, 0x43, 0xf1, 0xa9, 0x08, 0x9d, 0x9e, 0xd3, 0xef, 0x30, 0x7b, 0xc6, 0x43, 0xe8, 0x4a, 0x25,
	0xe9, 0x26, 0xd3, 0xea, 0xbb, 0xcc, 0xc3, 0x9d, 0x9e, 0xd3, 0xf7, 0x19, 0x54, 0x50, 0x6c, 0x11,
	0x7c, 0x0e, 0x1d, 0xa9, 0x0a, 0xe2, 0x2a, 0x13, 0x45, 0xe8, 0xf6, 0xdc, 0xbe, 0xcf, 0x96, 0x40,
	0x74, 0x0e, 0x1e, 0x2b, 0x95, 0x55, 0x7f, 0x09, 0xbb, 0x85, 0x50, 0xb7, 0xc2, 0xdc, 0xdc, 0x71,
	0x75, 0x3b, 0xa9, 0x6d, 0x76, 0x99, 0x5f, 0x83, 0x67, 0x16, 0xc3, 0x03, 0x68, 0x2f, 0xc8, 0x73,
	0xaf, 0x7f, 0x75, 0x74, 0x0e, 0x70, 0x29, 0xc8, 0xc8, 0x6c, 0xe3, 0xb0, 0xfb, 0xd0, 0xbc, 0xe7,
	0x93, 0xb2, 0xa6, 0x3a, 0xac, 0x2e, 0xaa, 0x4e, 0xe2, 0x79, 0x3d, 0x5c, 0x87, 0xd9, 0x73, 0xf4,
	0xdb, 0x81, 0x60, 0x2c, 0xcc, 0xbd, 0xcc, 0x44, 0x7c, 0x27, 0xb2, 0x1f, 0x1b, 0x25, 0xdf, 0x41,
	0xab, 0x20, 0x4e, 0x65, 0x61, 0x35, 0xf7, 0x86, 0x87, 0x83, 0x07, 0xcf, 0x38, 0x78, 0x28, 0x31,
	0xb6, 0x6d, 0x6c, 0xde, 0xbe, 0xce, 0x15, 0x43, 0xf0, 0xa6, 0xa2, 0x28, 0x78, 0x2e, 0xc2, 0x86,
	0xf5, 0x58, 0x94, 0xaf, 0x4e, 0x00, 0xff, 0xd7, 0xc2, 0x16, 0xec, 0x5c, 0x5d, 0x04, 0x4f, 0xb0,
	0x0b, 0xde, 0xf5, 0x88, 0xa5, 0x49, 0x7a, 0x1a, 0x38, 0xe8, 0x43, 0x3b, 0x66, 0xc9, 0xe7, 0x24,
	0x1e, 0x7d, 0x0a, 0x76, 0xaa, 0xab, 0x2f, 0xe9, 0x45, 0x7a, 0x75, 0x9d, 0x06, 0xee, 0xf0, 0x27,
	0x74, 0x13, 0x45, 0x22, 0x37, 0x9c, 0xa4, 0x56, 0xf8, 0x06, 0x1a, 0x55, 0xb6, 0xf8, 0x74, 0x65,
	0xe6, 0x45, 0xdc, 0x07, 0xb8, 0x02, 0xdb, 0x75, 0xc0, 0xd7, 0xe0, 0xb2, 0x52, 0xe1, 0xfe, 0xca,
	0xd5, 0x3c, 0xc1, 0x75, 0x84, 0xe1, 0x1f, 0x17, 0xfc, 0x71, 0x9d, 0xa0, 0x98, 0xcc, 0x84, 0xc1,
	0x63, 0x68, 0x9e, 0xf2, 0x32, 0x17, 0xf8, 0x6c, 0xa5, 0x7b, 0x99, 0xdc, 0x5a, 0xdf, 0x23, 0x68,
	0x30, 0x4e, 0x5b, 0x92, 0x8e, 0xa1, 0x19, 0xeb, 0x52, 0xd1, 0x76, 0xac, 0x0f, 0xb0, 0x77, 0xa9,
	0x95, 0x26, 0xad, 0x64, 0xf6, 0x08, 0xfa, 0x5b, 0xf0, 0x2c, 0x4b, 0x98, 0xed, 0x78, 0xef, 0xa1,
	0x73, 0x26, 0x0b, 0xd2, 0xb9, 0xe1, 0xd3, 0xc7, 0x31, 0xcd, 0xd6, 0x0f, 0x34, 0xaa, 0xb2, 0x59,
	0x6e, 0x15, 0xbe, 0xd8, 0xb8, 0xbc, 0x9b, 0x24, 0xbe, 0xb5, 0xec, 0xe7, 0x71, 0xf4, 0x37, 0x00,
	0x00, 0xff, 0xff, 0xa2, 0xf6, 0xf8, 0x60, 0x4c, 0x04, 0x00, 0x00,
}
