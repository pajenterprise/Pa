// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/aggregator.tmpl
// templates/clusteragent.tmpl
// templates/collector.tmpl
// templates/custommetricsprovider.tmpl
// templates/dogstatsd.tmpl
// templates/endpoints.tmpl
// templates/forwarder.tmpl
// templates/header.tmpl
// templates/jmxfetch.tmpl
// templates/logsagent.tmpl
// templates/metadatamapper.tmpl

package status

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAggregatortmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcd\x8e\xda\x30\x14\x85\xf7\x79\x8a\xbb\x46\xed\x64\x8f\xd4\x45" +
		"\x3b\xa5\x9a\x4d\x87\x05\xed\x03\x98\xf8\xc6\xb6\xf0\x4f\x64\xdf\x30\x52\xa3\xbc\x7b\x45\x0c\x21\x3f\x36\x0c\xab" +
		"\xe8\xdc\x73\xbe\xeb\x1c\x22\x77\x5d\xb9\x29\xde\xf7\x7f\x76\x5b\x78\x95\xcc\x0a\x0c\x60\x18\x47\x20\x07\x24\x55" +
		"\x00\x42\xd3\x68\x46\x08\x41\xba\x56\x73\x38\x22\x78\xac\x35\x56\x84\x1c\x9c\x05\x92\x08\xb5\xd3\xda\x7d\x28\x2b" +
		"\x46\x77\xf8\x02\xaa\x06\xd6\x34\x5a\x55\xec\xa8\x71\x5b\x6c\xa0\x32\xbc\x64\x02\x2d\x95\xa2\x55\xe5\x59\xe1\x47" +
		"\x28\x47\x7f\x29\xd0\xa2\x67\xfa\x40\x8c\xda\xf0\x42\xa6\xd1\xc5\xa6\xec\xfb\x6f\xb7\x5f\xf1\x5d\x08\x8f\x82\x91" +
		"\xf3\xc5\x5d\xec\xba\xaf\x97\x45\x2f\xaf\x12\xab\x53\xf8\x8d\xe4\x55\x75\x60\xa6\xd1\x08\x7d\x5f\x00\x44\x1d\xe2" +
		"\x00\xe2\x64\x0b\x5d\x27\x5b\xc3\xac\xfa\x87\xa9\x64\xdf\x0f\x58\xb4\x1c\xae\x8f\x97\x0d\x3f\x9d\x08\xc4\x28\xf0" +
		"\x85\x15\x60\x9c\x3c\x5a\x93\x8b\x27\x36\xed\xce\x68\x69\x20\x0f\x4f\x73\xce\x6d\x98\xcb\x85\x5f\xba\x0d\x12\xf9" +
		"\x3d\x1f\xe0\x2a\x25\x40\x13\xf7\x63\xe0\xce\x7b\xe7\xc3\x0a\x0a\x51\xcf\x92\xc7\x58\x82\xfe\xde\x9a\x23\xfa\x7d" +
		"\x3d\x18\x07\x72\x54\x60\x5f\x5f\x4f\xbc\xe0\x2e\x03\x09\xe6\x01\xbd\xc2\x59\x05\x51\x49\x57\xb0\x74\x3f\x06\x4e" +
		"\x2a\x98\x42\x93\x15\xa4\x62\x69\xfa\x59\x55\x38\x7c\x82\x37\xf0\x45\x88\x9f\xed\x0a\x39\xf5\x3e\xa1\x2d\x2a\xb8" +
		"\x43\xf3\x55\x24\xb2\x9f\x59\x32\xaf\x65\xb5\x28\x57\x4f\x06\x92\xda\x78\x42\xaa\xe4\xe2\x5f\xbd\x6a\x99\x97\x59" +
		"\x25\x9e\x61\xa7\x2f\x31\x43\xa7\x8f\x9f\x8c\x26\x76\xc4\x22\xde\x54\x20\x27\x3c\x33\x3f\xda\xea\x84\x94\xbd\xa4" +
		"\x46\x1f\x44\xe3\xf3\x5b\xeb\x01\x39\x7d\xa0\x37\x17\xc8\x32\x83\x7f\x1b\xce\x28\xde\x5e\x37\x09\xa2\x36\x5f\xb3" +
		"\xf2\x4f\x98\xc5\xff\x00\x00\x00\xff\xff\x5a\xa7\xa4\x24\x3a\x06\x00\x00")

func bindataAggregatortmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataAggregatortmpl,
		"/aggregator.tmpl",
	)
}

func bindataAggregatortmpl() (*asset, error) {
	bytes, err := bindataAggregatortmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/aggregator.tmpl",
		size:        1594,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1581504032, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusteragenttmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x41\x6a\xc3\x30\x10\x45\xf7\x3e\xc5\xdf\x75\x15\x1f\xa0\xd0\x45" +
		"\x71\x72\x81\x16\xba\x37\xd2\xd8\x11\x88\x99\x22\x8d\x02\x45\xe4\xee\x45\x56\x5c\xdc\x20\xdb\x2b\x23\x0d\xef\xbd" +
		"\x51\xf7\xd6\xfa\xba\xf3\xa8\xa3\x95\x19\x83\x4f\x51\x29\xe0\x7d\x26\xd6\x9d\xd9\x9c\xe1\x26\xf4\x67\x52\x32\xea" +
		"\x84\x2f\x21\x48\xc0\xfd\xde\x01\x27\x0c\x92\xbc\x05\x8b\xc2\x2e\xf7\xd0\x2b\xa1\x49\x7f\x89\x20\xb6\xdf\xe2\x58" +
		"\x5f\x91\x73\x0b\x98\x33\xc8\x47\x5a\xd9\x4d\xcc\x1f\xe4\x21\x24\x5b\x69\x97\xf5\x78\xe1\x9c\xca\xd8\xfa\x5b\xea" +
		"\x07\x61\x3e\xcc\x0f\x34\x9a\xeb\x7e\x7d\x95\x34\x28\x4f\xae\x22\x2b\xb8\xfe\x8b\x42\x74\xc2\x2d\x91\x06\x47\x37" +
		"\x5a\x5c\xb7\xc7\x94\x4c\xfb\xea\xfe\xff\xbb\x7c\x26\x63\x28\xc6\x29\x79\xff\x03\x53\x83\xc8\x42\xe5\x88\x50\x12" +
		"\x3e\x12\xb3\xe3\xb9\x6e\xb2\xc9\xdb\x6c\xf0\x1b\x00\x00\xff\xff\xcf\x52\x20\xcf\x2e\x02\x00\x00")

func bindataClusteragenttmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusteragenttmpl,
		"/clusteragent.tmpl",
	)
}

func bindataClusteragenttmpl() (*asset, error) {
	bytes, err := bindataClusteragenttmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/clusteragent.tmpl",
		size:        558,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1581504032, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCollectortmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4b\x6f\xe3\x38\x0c\xbe\xfb\x57\x10\x41\x0f\xd3\x41\x93\x1c\xe6" +
		"\x16\xa0\x87\x41\x93\x43\x80\xb6\x3b\xd8\x74\xb0\x67\xd5\x66\x62\xa1\xb6\x9c\x95\xe4\xb4\x1d\x43\xff\x7d\x41\x3d" +
		"\x6c\xf9\x91\xb4\xbb\x3b\x39\xc9\xd4\xc7\x8f\x8f\x50\x24\x9b\x66\xf9\x35\x79\xfc\xe3\x69\xb3\x82\xbb\x9c\x89\x03" +
		"\x2a\x28\x59\x86\xa0\x2b\xd0\x39\x57\xa0\xb1\x3c\x16\x4c\x23\xa8\xbc\xaa\x8b\x0c\x9e\x11\x24\xee\x0b\x4c\x35\x66" +
		"\x50\x09\xd0\x39\xc2\xbe\x2a\x8a\xea\x95\x8b\x43\x8b\x56\x37\xc0\xf7\xc0\x8e\xc7\x82\xa7\xec\xb9\xc0\x55\xf2\x15" +
		"\xd2\x32\x5b\xb2\x03\x0a\xbd\x3c\xd4\x7c\x79\xe2\xf8\xaa\x96\x2d\x7e\x99\x56\x05\x91\x56\x72\xa7\x99\xae\xd5\x42" +
		"\x97\xc7\xe2\x43\x25\xc5\xc5\xa1\xc0\xbb\x1c\xd3\x17\xaf\xb0\x34\xe6\x36\xfc\x92\xbb\xc0\x99\x74\xb2\xa4\x69\xe6" +
		"\xf0\xca\x75\x0e\x8b\xe3\xbb\xce\x2b\xb1\x15\x5c\xc3\xdc\x98\x04\x80\xae\xf8\x1e\x16\x1b\x29\x2b\xa9\xc0\xca\xec" +
		"\x19\xb8\xe0\x9a\xb3\x82\xff\xa2\x20\x7f\x58\xbd\x04\xe0\xf6\xdc\x2f\x01\x20\x36\x90\x94\x50\xb8\x42\x29\x61\x75" +
		"\xdb\xf2\x3a\x63\x00\x73\x82\xd8\x4b\x2f\x68\x1a\x40\x91\x41\xeb\x0b\x7d\x10\x38\x9c\x8d\x49\x12\x80\x3f\x6b\x21" +
		"\xc8\x0d\x1b\xb6\x1a\xb9\x11\x05\x48\x48\xb4\x09\x55\x10\x07\xc8\x44\x06\x5f\x44\xa5\x2d\x42\x5d\xfb\xb3\xe3\xbb" +
		"\xf6\xbe\x3c\x56\x90\x5a\x01\xe4\xec\x84\x20\x6b\x01\xef\xa8\x2d\x47\x70\xcb\x13\xfa\x20\xad\xfa\x23\x2b\xf1\xc6" +
		"\x9f\xb7\x42\x69\x26\x52\x54\x36\x76\xc7\xde\x05\x7a\x75\x42\xa9\x78\x25\xe8\x32\x1c\x87\x7a\x2d\xba\x23\x37\xa6" +
		"\x69\x28\x84\x56\xdd\x18\xf8\xd2\x34\xe1\xd3\x98\xeb\x38\x89\xa4\x7b\x94\x5c\xe8\x35\x53\x39\xaa\xc8\x49\x98\xcd" +
		"\x67\xc4\x35\x1f\x90\x0d\xf0\xe1\xc2\xa2\xe7\xf3\xf9\x90\xbc\x1f\xfd\xc8\x73\x80\x20\x82\xed\x7a\x05\x4d\xe3\xd2" +
		"\xb0\x5d\x1b\x03\x4d\xa3\x6c\xa5\xc3\xa2\x05\xdf\x55\x62\xcf\x0f\xb5\x64\x9a\x6c\xee\xaa\x5a\xa6\xd8\x69\xb9\x5b" +
		"\x27\x6d\x55\x9e\x2a\xcd\x0a\x2a\x09\x45\xc0\xbc\x2e\x99\xe0\xbf\x10\x16\x56\x4e\xe2\x16\xf9\x80\x5a\xf2\x14\x76" +
		"\xac\x3c\x16\xa8\x56\x70\xcf\x94\x26\xc5\xbe\x9e\x43\x79\x90\x31\x37\xce\xc0\x04\xf7\x00\xe8\x8d\x6c\x4e\x28\xf4" +
		"\x59\x72\x77\x7b\x89\x35\x20\x3c\xdd\x0e\xe5\x89\xa7\xe8\x4b\xfd\x1c\xad\x47\x85\x0a\x3b\xcf\x3e\x00\x7a\x23\xdf" +
		"\x4f\x28\xd9\x01\x61\xf3\x86\x69\x6d\x33\xff\xc4\x4b\x84\x58\x7f\x1d\xfe\x93\x85\x07\xb7\x58\x0b\x9d\x95\x6a\xd6" +
		"\xd2\x59\x1f\x3b\xae\x35\xf5\x4e\xe2\xda\x57\xb2\x64\xfa\xa7\xe0\x6f\x56\x67\xf1\xf3\x98\x31\x8d\x74\x56\x9a\x95" +
		"\xc7\xbe\xfe\xae\x4e\x53\x54\x6a\x5f\x17\x53\x54\xb6\x49\x11\xce\xc3\xec\x05\xd5\xee\xd0\xc6\x00\x63\x1f\x0f\x16" +
		"\x8a\xc0\x8f\x78\x42\xd9\x2f\xe7\xb6\x3f\x5c\xb9\x82\x7b\x40\xcd\x32\xa6\xd9\xe8\x9e\x8b\x0c\xdf\x46\xa8\x50\xdb" +
		"\x1d\xbc\xf4\x57\xab\x48\xdd\xbf\x97\x97\x1b\xb8\x3a\xd1\xdb\xff\x2c\x97\x6b\x1a\x2f\x60\xcc\xca\xb5\x8f\xbe\x57" +
		"\xa3\x30\x3e\x12\x84\x14\xba\xfe\x3e\xef\x2a\x98\xbe\xc9\x44\x11\x2e\x1f\x50\x29\xaa\x8f\x0e\x1e\xd1\xb4\xa8\x27" +
		"\xc9\x52\x7c\x66\xe9\xcb\x34\xed\xa4\x4b\xc1\x87\xbf\x98\xa4\x8e\xae\x22\x7c\x9c\xac\x3e\xa6\x85\x78\x89\x6d\x10" +
		"\xfd\x34\x85\x06\x3d\x69\xba\xf7\x19\x7d\xc4\x43\x26\x9e\x91\xf7\x15\xcb\xa6\x86\xc8\xe2\xc7\xfb\xb7\xbe\x53\x6e" +
		"\x2e\xc2\x37\xb8\xe7\x42\xa3\x0c\x0e\x8e\x47\xd4\x70\x4e\x4e\xce\x90\xd7\xc0\xbd\xba\x85\x09\x63\xa1\x22\xba\x8e" +
		"\x1e\x89\x2f\xf5\xfc\x71\x2d\xf2\xec\xad\xb3\x47\xe6\x5a\xdb\xbd\xb4\x06\xe9\xf9\xc4\xa2\xc8\x86\x59\xed\xd2\x15" +
		"\x9a\x3b\xc6\xdb\x85\xf5\x0d\xb6\x61\xbb\x70\x4d\xc6\x01\x2e\xed\x17\xb4\xc7\xf4\x57\x8c\x38\x73\xe8\x0c\xd8\xbc" +
		"\x4d\x5a\xfd\xed\xb9\xf3\x0b\x8e\xb7\xec\x56\x03\xfa\xf1\x30\xfd\x9a\x86\x90\xc6\xac\x92\x38\xa1\x28\xe5\x07\x55" +
		"\xfa\xb9\x22\xfd\x5e\xeb\xca\x4f\xc7\x71\x99\xba\x8b\x4d\xf0\x2c\x4c\xd9\x73\x59\x1e\x96\xa4\x5d\x82\x44\x94\x58" +
		"\xb7\xcd\x44\xa4\xd1\x9a\xd2\x82\xa7\xb7\x8f\xf6\x7a\x90\x4d\x47\x7c\xe1\x7d\x9e\x8d\xdc\xfe\x3f\xbb\x34\xc7\xac" +
		"\x2e\x26\x1f\xa9\x7b\xbd\x51\xf4\x24\xa0\x32\xff\xaf\xe1\xbb\x6d\x2e\xa6\xfd\xff\xf1\x77\x53\x81\x8b\x6c\x54\x4e" +
		"\xa3\xae\xc8\xf7\x80\x7f\x3b\x30\xcc\x7c\xd3\x71\x0f\xc9\xb9\x35\x8b\xcb\xd9\xc2\xa8\xf0\xce\xd4\x9d\x6b\x98\x6e" +
		"\x26\xfe\x4b\xa5\x0b\x13\xe6\xe3\x3f\xf1\x9f\x00\x00\x00\xff\xff\x21\x87\xd6\xec\x78\x0d\x00\x00")

func bindataCollectortmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataCollectortmpl,
		"/collector.tmpl",
	)
}

func bindataCollectortmpl() (*asset, error) {
	bytes, err := bindataCollectortmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/collector.tmpl",
		size:        3448,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1583318735, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCustommetricsprovidertmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x3d\x4f\xf3\x30\x10\xc7\xf7\x7e\x8a\x1b\x3a\x3d\x7a\x6a\xf6\x48" +
		"\x9d\x80\x0d\x58\x0a\xec\xd7\xe4\x02\x56\xfd\x12\xd9\x4e\x54\xb0\xfc\xdd\x51\x2e\x71\x30\x90\x42\x96\xe8\x7c\xbf" +
		"\xff\xff\xde\xae\x7b\x1f\xac\x86\x7b\x0a\x4e\xd6\x1e\x0e\xe4\x06\x72\x9b\xfd\xda\xb7\x01\x88\x71\x07\xb2\x05\x51" +
		"\xb3\x4a\x4f\x22\x71\x23\x3d\x1e\x15\x35\x90\xd2\x06\x00\xe0\x10\x30\xf4\xbe\x82\x18\xff\x22\xd7\xfd\x6e\x9d\xb3" +
		"\x2e\x23\x1c\xac\x79\x7d\xa1\x62\x04\x52\x9e\x72\xf8\x68\x03\xaa\x55\xd1\x39\x90\x33\xa8\x04\x13\x19\x7f\x46\x25" +
		"\x9b\x5f\x71\x26\x8a\x62\x0e\xcd\x0b\xc1\x76\xe2\xa0\xda\x5f\x14\xe6\xc5\xb2\xf4\x1f\xc4\x38\x6b\x84\xa3\x96\x1c" +
		"\x99\x9a\x44\x78\xeb\x28\x25\xe8\x6c\x03\xd8\x07\xeb\x6b\x54\xc4\x13\xff\x44\x0d\x6a\xf2\x1d\xd6\x94\xd2\xd5\xa5" +
		"\xfc\xdc\xe4\x54\x18\xc6\x97\xd2\x6b\xfa\x3d\x7c\x72\x77\x78\x24\xe5\xab\xe5\x1c\xf3\x64\xa7\xff\xb0\x1d\xc6\xc1" +
		"\xb2\x50\x31\x97\x57\xb0\x1b\x2d\x4f\x29\xb1\xf5\x50\x5c\x93\x4c\x53\x6c\xb5\xe7\xda\xf0\xda\x6b\x34\xf2\x7d\x59" +
		"\x98\x18\xc6\x54\xbe\x95\xd4\xe4\x03\xea\x8e\xd1\xd6\x3a\x8d\xe1\xc9\xc8\xf3\xf8\xbe\x08\x82\xff\x7e\xaa\xc2\x4a" +
		"\x36\xeb\x0d\xe4\x70\xc7\x71\x91\xfc\x08\x00\x00\xff\xff\x68\xd3\xef\x7f\xf5\x02\x00\x00")

func bindataCustommetricsprovidertmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataCustommetricsprovidertmpl,
		"/custommetricsprovider.tmpl",
	)
}

func bindataCustommetricsprovidertmpl() (*asset, error) {
	bytes, err := bindataCustommetricsprovidertmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/custommetricsprovider.tmpl",
		size:        757,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1581504032, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDogstatsdtmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\xbf\x6e\xf3\x30\x10\xc3\x77\x3d\x05\x87\x4c\x46\xbe\x68\x37\x90" +
		"\xe9\x4b\xd7\x76\x68\x5e\xe0\x62\x9f\x65\xa1\x27\xc9\xb0\xce\x09\x5a\xe1\xde\xbd\x48\xff\xa4\x1c\xc9\x1f\x09\xb6" +
		"\xe6\x3b\xf7\xfc\x72\x7e\xea\xf1\x7f\xa6\x1c\xb8\x22\xd1\xc8\xd0\x02\x9d\x63\x85\x72\x5a\x84\x94\x51\xe7\xb2\xc9" +
		"\x88\x0b\x63\xe5\x49\x78\x50\x1e\x51\x32\x74\x66\x4c\x45\xa4\xdc\x62\x0e\x0f\xba\xee\x11\x27\xd0\xb2\x48\x1c\xe8" +
		"\x22\xdc\xbb\x0e\x43\x1a\x3d\x05\xce\xea\xc3\x16\xfd\x35\xf2\xad\xfa\x07\xef\x03\x67\x5e\x49\x5e\x95\x74\xab\x07" +
		"\x4d\x8b\xb8\xce\x9b\x1d\x7f\xe5\x4e\x25\xdc\xc3\x7a\x72\x7f\x5e\x6b\xff\xb0\xde\x4f\x63\xf7\xc6\xef\x7b\xec\xae" +
		"\x24\x1b\xa3\x3f\xe2\x60\xe6\x80\xd6\xa6\xb2\x26\xd2\x73\x54\xf9\x66\xcc\x7a\xb4\x36\x6f\x89\x72\xfc\xe0\x9f\x82" +
		"\xd9\xd7\x12\xe7\x11\x66\xee\x33\x00\x00\xff\xff\xa8\xce\xb3\x10\x12\x01\x00\x00")

func bindataDogstatsdtmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataDogstatsdtmpl,
		"/dogstatsd.tmpl",
	)
}

func bindataDogstatsdtmpl() (*asset, error) {
	bytes, err := bindataDogstatsdtmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/dogstatsd.tmpl",
		size:        274,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1581504032, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataEndpointstmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\xc1\xaa\xdb\x30\x10\xbc\xeb\x2b\xe6\x90\x43\x1b\x92\x88\x5e\x03" +
		"\xef\x50\xda\x77\x28\x85\xd7\x42\xdf\x0f\xe8\x59\x6b\x7b\x89\x2c\x19\x69\x1d\xd7\x08\xfd\x7b\x91\x63\x4c\xba\xa7" +
		"\xd5\xec\xce\x0c\x3b\xca\x59\x1f\xd5\xdb\xaf\xf7\xd7\x2b\xbe\xf5\xc6\x77\x94\x30\x18\x4b\x90\x00\xe9\x39\x41\x68" +
		"\x18\x9d\x11\x42\xea\xc3\xe4\x2c\x3e\x08\x91\x5a\x47\x8d\x90\x45\xf0\x90\x9e\xd0\x06\xe7\xc2\xcc\xbe\xdb\xb7\xd3" +
		"\x09\xdc\xc2\x8c\xa3\xe3\xc6\x7c\x38\xba\xaa\x23\x9a\xc1\x6a\xd3\x91\x17\xdd\x4d\xac\xef\x4c\x73\xd2\xfb\xbe\xee" +
		"\xc8\x53\x34\xee\x8f\x18\x99\xd2\x45\x86\xd1\xa9\x23\xbe\x87\xe6\x46\xb1\x65\x47\x49\x37\x6e\x4a\x42\xf1\xfc\x90" +
		"\xb0\x9c\xe4\x89\xdd\x86\x38\x9b\x68\x29\x6e\x4c\x5d\xca\xcb\x5e\xea\xd5\xdb\x31\xb0\x97\xa4\x9e\x40\x95\xf3\x19" +
		"\x33\x4b\x8f\x4b\x29\x0a\xa8\xcf\x58\x03\xc0\xe1\x46\xcb\x09\x87\xbb\x71\x13\xe1\xfa\xb2\xcf\x2b\x5e\x0a\xce\xf8" +
		"\xfa\xfb\x07\x7e\xd2\x92\x73\x3d\xb2\x13\x7c\x72\xe4\xb7\xfd\xcf\xf8\x52\x4a\xca\x99\xbc\x2d\x05\xe4\x6d\x4d\xa5" +
		"\xba\x5c\xa1\x80\xff\x5c\xd8\xfe\x3d\xe1\x60\x46\xbe\xd1\x52\x6d\x36\xc3\xd5\xac\xd6\xb9\x5a\x3e\xc6\x1b\x56\xc9" +
		"\xab\xb0\x7a\xee\xd7\xce\xa5\x95\xa9\x80\xb7\x50\xf1\xc7\xbd\x60\xdf\x86\x38\x18\xe1\xe0\x2f\x78\xef\x09\x6b\x7a" +
		"\x18\xcc\x52\x3f\x72\xe0\xd4\x04\xdf\x72\x37\x45\xb2\x17\xb5\x49\xae\x3a\xff\x02\x00\x00\xff\xff\xa0\xd1\x19\xf4" +
		"\x17\x02\x00\x00")

func bindataEndpointstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataEndpointstmpl,
		"/endpoints.tmpl",
	)
}

func bindataEndpointstmpl() (*asset, error) {
	bytes, err := bindataEndpointstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/endpoints.tmpl",
		size:        535,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1581504032, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataForwardertmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x5f\x6f\x9b\x30\x14\xc5\xdf\xf9\x14\x47\x55\x1f\xd6\x2a\x8d\xdf" +
		"\x91\xfa\xd0\x7f\xd3\xaa\x6a\x6b\xa5\x45\xda\xb3\x83\x6f\xc0\xaa\xb1\x91\x7d\x69\xc4\x50\xbe\xfb\x64\x20\x09\x25" +
		"\x28\x9b\x34\x3f\xc1\xf5\xf1\xb1\xef\x8f\x63\xda\x56\x5c\x27\x3f\x5e\x57\x4f\x29\x1e\x0a\x69\x73\x0a\x28\xa5\x22" +
		"\xb0\x03\x17\x3a\x80\xa9\xac\x8c\x64\x42\x28\x5c\x6d\x14\xd6\x04\x4f\x1b\x43\x19\x93\x82\xb3\xe0\x82\xb0\x71\xc6" +
		"\xb8\xad\xb6\xf9\x41\x1d\x16\xd0\x1b\xc8\xaa\x32\x3a\x93\x6b\x43\x69\x72\x8d\xac\x54\x42\xe6\x64\x59\xe4\xb5\x16" +
		"\x1f\x9a\xb6\x41\x1c\xf4\x22\x27\x4b\x5e\x9a\x9f\x2c\xb9\x0e\x4b\x2e\x2b\x93\x5c\x8b\xdd\xee\x76\x3f\x92\xaf\xce" +
		"\x6f\xa5\x57\xe4\x93\x63\xad\x6d\xe3\x36\xcb\x95\x97\x36\xc8\x8c\xb5\xb3\x01\xbb\x5d\x02\x8c\x2b\x09\x70\x3b\x1a" +
		"\x09\xd0\xb6\x37\xf0\xb1\x57\x5c\xbe\x53\xb3\xc0\xe5\x87\x34\x35\x21\xbd\x9d\xb3\xea\xe5\xb1\x1b\xab\xf0\xc5\xf6" +
		"\x6b\x70\xf1\xe4\xbd\xf3\xe1\xe2\xea\xa4\x74\xdf\xac\x9a\x8a\x3e\x4d\x7c\x5b\xad\xde\x66\xf4\xc7\xf2\x7d\xf3\xe0" +
		"\x14\x5d\x5c\x1d\x36\x8c\x82\xdd\x2e\x45\xdb\x16\x75\x29\xad\xfe\x4d\xc3\x21\x47\x47\x22\xab\xba\xb7\xe9\xf3\x94" +
		"\xc8\xf2\xd1\xbb\xaa\x22\xf5\x6a\x9f\x6d\x55\x73\xec\xaa\xf3\xf8\x25\xbd\xd5\x36\x4f\x87\x4f\x38\xd0\x85\xea\xd5" +
		"\xe0\x91\xc5\x22\x6a\x3c\x41\x07\x54\xde\xad\xe5\xda\x34\x90\x16\x3a\x84\x9a\xb0\xd5\x5c\xa0\x71\xb5\x87\x25\xde" +
		"\x3a\xff\xde\xb9\x7f\x77\x51\x6f\x37\x0e\x92\x51\x30\x57\x21\x15\x22\xd7\x5c\xd4\xeb\x65\xe6\x4a\xf1\x28\x59\x3e" +
		"\xba\x5c\x28\xc9\x52\xb9\xfc\xa6\x4f\x06\x7b\x22\x51\xca\xc0\xe4\x85\x72\x59\x18\x02\x13\xfa\x54\x94\xea\x5f\xda" +
		"\xed\x91\x0e\x6d\x8e\x66\xd0\x4f\x4c\xe2\x70\x08\x05\xb0\x72\x2c\x0d\x6c\x5d\xae\xc9\x47\xf4\x73\xb6\x03\xff\x61" +
		"\x8f\xfb\x06\xf1\x63\xa7\x5d\xad\x1f\xa3\x6c\x71\x53\xd1\x02\x97\x99\xab\x2d\x9f\x84\x6b\x39\x4e\xcb\x3e\x69\x63" +
		"\x13\xbd\xd9\x2f\x3d\x4c\xb6\x6d\xe7\x39\x0d\x46\xa7\x9a\x71\xd8\x53\x9a\xab\xfd\x95\xe2\x31\x9c\x03\xc9\x58\xf8" +
		"\x4f\x84\x47\xcf\xe1\x5c\x23\xcf\xc8\x32\x5e\x82\x34\x39\xe1\x98\x39\x75\x86\xe3\xf4\x16\x7d\xc2\x15\x97\x9e\xc7" +
		"\x35\x0f\xe5\xf8\x94\xec\xe9\xdc\xbd\x3d\xbf\x50\xd3\xff\x9f\x06\x24\x77\x6f\xcf\x78\xa1\x26\xa0\xcf\xe7\x29\x96" +
		"\xf3\xff\x9a\xa9\xe3\xf4\xea\x8f\x6e\xfc\x70\x1e\x7c\x3e\xda\x9f\x00\x00\x00\xff\xff\x00\x28\xd7\x37\xbc\x05\x00" +
		"\x00")

func bindataForwardertmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataForwardertmpl,
		"/forwarder.tmpl",
	)
}

func bindataForwardertmpl() (*asset, error) {
	bytes, err := bindataForwardertmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/forwarder.tmpl",
		size:        1468,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1581504032, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataHeadertmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\x4d\x6f\xdb\x3c\x12\xbe\xeb\x57\x0c\x8c\xf7\xd0\x06\x89\xbc\xe7" +
		"\x00\x39\x74\x9d\x74\x5b\x20\x4d\x83\xc6\x6d\x8f\x01\x2d\x8d\x25\xc2\x14\xa9\x90\x23\xa7\xae\xe1\xff\xbe\x18\x52" +
		"\x5f\xb4\xe5\xb4\xaf\x2f\x11\x87\xcf\x7c\x0f\x67\xc8\xec\xf7\xf3\x8b\xe4\xe1\xeb\xf2\xee\x1a\x16\xa5\xd0\x05\x3a" +
		"\xa8\x44\x8e\x40\x06\xa8\x94\x0e\x08\xab\x5a\x09\x42\x70\xa5\x69\x54\x0e\x2b\x04\x8b\x6b\x85\x19\x61\x0e\x46\x03" +
		"\x95\x08\x6b\xa3\x94\x79\x95\xba\xe8\xd1\xee\x12\xe4\x1a\x44\x5d\x2b\x99\x89\x95\xc2\xeb\xe4\x02\xb2\x2a\x9f\x8b" +
		"\x02\x35\xcd\x8b\x46\xce\xb7\x12\x5f\xdd\xbc\xc7\xcf\x0b\xd4\x68\x85\x7a\x22\x41\x8d\x4b\xa9\xaa\x55\x72\x31\x3f" +
		"\x1c\xf6\xfb\xda\x4a\x4d\xb7\xc2\x95\xe8\x20\x25\x49\x0a\x61\x76\x33\x3b\x1c\x92\xfd\x3e\x2c\xfd\xe7\x59\x54\x02" +
		"\x10\x64\x42\x2e\x08\xaf\xc1\x73\x55\xcc\x04\xf0\x81\xad\x01\x47\xc2\x92\xdf\xf0\xd6\x3d\xfb\xb5\xdf\x7f\x94\xb9" +
		"\xa7\xd7\x32\xf7\xeb\xff\x19\xf8\x81\xd6\x49\xa3\x3d\xb9\x30\xcf\xdb\xb0\xf4\xbb\xfb\xfd\x15\x3b\x9d\xd6\x3b\x2a" +
		"\x8d\xee\xb6\x20\x48\xf2\xb4\x88\x3b\x86\xf5\x12\x50\xe7\x81\xe5\xbf\x8d\x54\x39\x08\x9b\x95\x1e\xbe\xe2\xe5\x33" +
		"\x2f\x23\x65\xb6\xd1\x1a\x2d\x7b\xe8\xd2\x9f\xc6\x6e\xd0\x3a\xbf\xbf\x28\x31\xdb\xc0\x37\xbf\xeb\xbc\x80\x73\xc8" +
		"\xfd\x9e\x55\x5e\x45\x52\x33\xa3\xd7\xb2\x48\x95\x29\x9e\xd7\x52\x85\x60\xdd\x9b\x02\x3e\x4a\x15\x42\x38\x05\x18" +
		"\x0b\x62\xf0\x3d\x6e\x51\x1d\xa3\x15\x13\x43\x5a\x1e\x05\x95\x2e\x01\xb8\xe1\x5f\x02\x00\xb0\xf0\xb8\x5e\x4b\x67" +
		"\x49\xab\xa2\x15\xd4\xaf\x50\x39\x3c\x1c\x96\x25\x5a\x04\xe9\x40\x1b\x08\x7a\x80\x01\xde\x18\x6f\x0a\x78\x72\x9a" +
		"\x8f\x2d\xe1\x3f\xf9\x73\x2d\xa8\x6c\x21\x47\x8e\x8b\x3c\x97\x24\x8d\x16\xea\x39\xe3\x40\xba\x36\x27\x00\x61\x19" +
		"\x4b\x3b\x45\x8f\xa4\xb6\xf9\xe4\x94\x28\x93\x6d\x7a\x87\x6f\x22\xbd\x9a\xea\xaf\xeb\xb5\x43\xea\xf4\x3c\x2c\x1f" +
		"\xc1\x78\x0a\x6b\x82\xb2\xa9\x84\x96\xbf\xf1\xb6\xb1\x82\x55\x8d\x39\x66\x6e\x16\x7b\xa1\xa9\xfe\x29\xac\xe6\xf3" +
		"\x38\xc0\x7a\xc8\x0e\xf9\xb0\x2e\xf1\x17\xc1\x6c\xd0\xc2\x11\x2c\x65\x51\xa6\x70\x2b\x48\xe4\xa6\x80\x4a\xec\x40" +
		"\x16\xda\x58\x84\x0a\xc9\xca\xcc\x81\xe3\xe3\xb2\xda\x85\xc6\xe0\x0f\x4f\x3a\x3b\x75\x75\x62\xf9\xb4\x73\x84\x15" +
		"\x7c\x5f\x2e\x80\x0f\xdf\xf8\x14\x26\x5d\x08\x4a\xe3\x48\xea\xb5\x69\xa3\xf5\xc9\x38\x82\xcf\x7a\x6d\xfa\x80\x85" +
		"\x98\x31\xdc\x72\x9f\x82\x7f\xb4\xa8\xf0\x12\xfe\xd9\x0a\xd5\x20\x5c\xdf\x8c\x44\x5c\xc5\x01\x11\x3a\x87\x77\xba" +
		"\xe5\x80\x19\xc3\xf8\x6b\xf6\xfe\x98\x2a\x73\xa6\x05\x89\xef\x07\x5f\x3c\xe2\x70\x68\x6b\x12\x5f\x3a\x96\x95\x31" +
		"\xb4\x94\x15\xce\x80\xeb\x11\xd6\xc6\x56\x82\xbe\x6b\xf9\x8b\x89\x9d\x61\x7e\x8b\x6b\xd5\x7f\x45\xfc\x4d\x4d\x03" +
		"\xf7\x49\x8a\x5b\x7e\x9f\xde\xb1\x88\x58\xb0\x0f\x72\xff\x71\x1a\xfc\xd1\x22\x2e\xc7\x4f\x6d\x14\xdc\xbf\x08\x70" +
		"\x85\x24\x72\x41\xc2\x7f\xfc\x21\xca\xec\xda\x6f\xa3\xd1\xfd\x29\xa4\x61\xef\x0f\xb6\x0f\x47\x85\xf3\xb4\x14\x85" +
		"\x8b\xa8\x05\xc1\x3b\x85\x7a\xd8\x7d\x0f\xff\xe9\x94\x31\x09\x48\x14\xee\xba\xd7\xd0\xfa\x47\xa2\xe8\xeb\x86\x99" +
		"\x5a\x06\x6f\x1f\x89\xe2\xaf\x4c\x1a\xc5\xbd\xab\x2b\xa8\xad\xd9\xca\x1c\xad\xaf\xf3\x8e\x1a\x3a\x6f\xb7\x75\xd6" +
		"\xf8\x01\x8a\xd6\x1a\x3b\x76\xa4\xd1\x8d\xc3\xfc\x54\x8d\x77\xec\xc4\xb0\xb7\x0e\xc9\xb1\x92\x3e\x95\x43\x0f\xe9" +
		"\xf3\x28\x94\x9a\xc1\x38\x32\x67\x32\xd7\x9b\xf0\x76\xea\x8e\x55\xa7\x42\xa9\x4e\xbc\xa7\x4c\x04\x6d\x40\x1e\xcb" +
		"\x4e\x00\xbe\xb4\x35\x39\x2a\xe3\x38\x02\x1b\xdc\x45\x01\x08\x53\xbe\x2b\xe5\xa1\x24\x3d\x12\x82\x67\xc3\x19\x3b" +
		"\xd2\xd7\xb9\xa2\x50\xe4\x68\x91\xef\x41\x61\x7a\x27\xf7\x9e\x02\x77\x2d\x29\xb9\x89\x7f\x3c\x14\x63\x44\x7b\x2f" +
		"\xb9\x66\x05\x47\xf2\x52\xe7\xb7\xc6\xc1\xc3\x97\x63\xa5\x2d\x08\x66\x1f\x85\x54\x52\x17\xa1\x15\xdf\xf5\x31\x3c" +
		"\x42\xfb\x20\x76\x83\xda\x8f\xce\xc1\xa4\x07\xce\xb4\x74\x53\x6c\x61\xf9\x20\xda\x2b\xd3\xbd\x70\x04\x1f\xb2\x97" +
		"\x46\x3a\x3f\xf3\xc0\xac\xfd\x15\x50\xa1\x70\x38\xc5\x2f\x18\x6b\x31\x5f\x76\x97\xae\x6f\xa8\xf1\x15\x73\x08\x38" +
		"\x57\xca\x7a\x8a\xcd\x06\x54\xcf\xf5\xd0\x54\x2b\xb4\xac\x2d\x00\x81\xac\xd0\xc1\x84\x49\xb3\x47\xdb\xe3\x1c\x0e" +
		"\x5d\x70\x9c\xcc\xac\x71\x64\xaa\x6e\xca\x31\x7e\xe1\x29\x5c\x5b\x9e\xf4\x84\x76\x8b\x36\x81\x9b\xa9\x5f\x32\xbe" +
		"\x3f\x8c\x25\xa5\x3e\x17\x6d\x81\xf5\x79\x79\x0b\x34\xb4\xf9\xf3\x42\x6f\xa5\xe3\x1b\x75\xd7\x75\xba\xe5\x94\xe8" +
		"\x23\x68\x2c\x3d\x5c\xb6\xbe\x88\x1a\xf8\xa0\x4d\xb1\x2f\x2a\xdf\x01\x7a\xe6\x53\x5b\x9e\xc8\x58\xfc\x2b\x2f\x4f" +
		"\x90\xb1\x31\x77\xbf\x08\xad\x16\xaa\x8b\x38\xd3\xae\x8e\x7e\x09\xc0\xf9\x48\xb7\xfc\xe9\xbd\x74\x34\x56\xf3\x56" +
		"\xe0\xcf\xf3\xc4\xc6\x01\x2c\x0d\x09\xf5\xa6\x0c\x8f\xe8\xf1\x3f\x84\x92\x93\x19\xe9\xf1\x1e\x31\xd6\xd7\x36\xab" +
		"\x00\xf4\x7d\xea\x0c\xe7\x97\x51\x99\x02\x5c\x70\x1b\x0e\x98\xd4\xe2\x1a\x2d\xea\x0c\x53\xda\xd5\x78\x38\x40\x6d" +
		"\x72\x10\x0d\x19\x97\x09\x15\xa6\xd1\x29\xd4\x5f\x01\x6a\x91\xe1\xe1\x30\x3f\xb7\xdf\x99\x19\x54\xf7\xf5\xd2\x81" +
		"\xc3\x9f\x87\x11\xf0\x5e\xac\x50\xb5\xf3\x36\x6a\xc5\xdc\x88\xd9\xb9\x8e\x55\x79\x60\x1f\x87\x2b\x96\xba\xe9\x86" +
		"\xcb\x10\x9d\x68\xcc\x72\x74\x1b\x8c\xae\xc5\xbd\xbc\x68\x20\x71\xf3\x70\x24\x2a\xdf\x60\x4e\x6e\x67\x2d\x07\xb9" +
		"\x93\xa4\x8d\x84\xc9\xfc\x9c\x11\xdd\xfa\x6a\x38\xab\xc3\xf6\xd9\xd5\xd4\x28\xc9\x54\xe3\x08\x6d\x78\x3a\xf8\x9d" +
		"\x45\xa0\x84\x47\x9c\xe3\x23\x5e\x0b\xca\x4a\xa9\x8b\xe3\xa9\x32\x6e\x43\x93\xf2\xd2\xb6\xc3\xc7\xcf\xbb\x08\xf1" +
		"\x21\x23\xb9\x6d\x6b\xbd\x1b\x49\x81\xeb\x12\x1c\xda\x2d\xbf\x23\x2c\xbe\x34\xe8\x88\xcf\x65\x0b\xd7\x26\x47\xd7" +
		"\x96\x78\x24\xee\xc1\xe4\xb8\x30\x8d\x6e\x9f\x32\xe1\x21\x1a\x9a\x4d\x7b\xb3\x9d\x64\xf3\x07\x28\xc0\xfa\x7a\xb8" +
		"\xea\x5d\xef\xfb\xdb\x84\xe5\x27\x4c\xdf\xb5\x70\x4e\x16\x7a\x9a\xe9\x56\xe8\x82\xc7\x65\xc4\xe6\xf3\xd2\x9f\xf8" +
		"\xe3\x28\xbc\x0a\x5b\x71\x14\x9a\x7a\xe2\x42\xcd\x5c\xa7\x41\xfd\xe8\xff\x25\x12\x02\xff\x56\x62\x3e\x3f\xc6\x2a" +
		"\x3b\xbe\x4b\xb0\x98\x4b\xcb\xd3\x4c\x17\x40\xa6\x1b\x7b\x82\x26\x5c\x8a\x45\x4d\xfb\x32\x08\xd6\xbd\xb0\xb5\x69" +
		"\x74\x7e\xc6\xa5\x88\xb9\xd1\x1b\x6d\x5e\x75\x32\x5d\xc9\xfb\xfd\xfc\x22\xbc\x09\x95\xd4\x08\x52\x13\xea\xf0\x1e" +
		"\x56\x3b\x50\xb8\x26\x58\x29\xa1\x37\x70\x31\x3f\x1c\x92\xff\x07\x00\x00\xff\xff\xc6\xd1\x0f\x88\x70\x12\x00\x00" +
		"")

func bindataHeadertmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataHeadertmpl,
		"/header.tmpl",
	)
}

func bindataHeadertmpl() (*asset, error) {
	bytes, err := bindataHeadertmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/header.tmpl",
		size:        4720,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1583318735, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataJmxfetchtmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x3f\xab\xdb\x30\x14\xc5\x77\x7d\x8a\x33\x78\x68\x42\x62\xef\x86" +
		"\x4c\xa5\x81\x06\xd2\x0e\xed\x90\xad\x28\xf6\xb5\x2d\x22\xcb\x26\xba\x71\xa0\xc2\xdf\xbd\xf8\x6f\x65\xdc\x94\xb7" +
		"\x3c\x78\x9a\xa4\xcb\x39\xbf\x7b\x38\x72\x2e\xda\x8a\x6f\xdf\x7f\x7e\x89\xf1\xb9\x90\x26\x27\x8b\x52\xa6\x04\xae" +
		"\xc0\x85\xb2\x60\x2a\x6b\x2d\x99\x60\x8b\xea\xa1\x53\x5c\x09\x77\xca\x34\x25\x4c\x29\x2a\x03\x2e\x08\x59\xa5\x75" +
		"\xf5\x54\x26\x9f\xd5\x76\x07\x95\x41\xd6\xb5\x56\x89\xbc\x6a\x8a\xc5\x16\x49\x99\x46\x32\x27\xc3\x51\xfe\x50\x51" +
		"\xa3\xe8\x69\xa3\x59\x1f\xe5\x64\xe8\x2e\xf5\x0f\x96\xfc\xb0\x21\x97\xb5\x16\xdb\xa8\x6d\x0f\xe3\x11\xa7\xf3\xe5" +
		"\x48\x9c\x14\x62\x9e\x38\x87\xa7\xe2\x02\xe1\xe9\x7c\x19\x6c\x68\x5b\x01\x38\xb7\xef\x97\x9b\x14\x9f\x4c\xc5\x08" +
		"\x59\x95\x64\x59\x96\xf5\x66\x1c\x24\x05\x25\x37\xbb\x19\xe4\xa6\xc2\xe9\x7c\x81\x1d\x08\xb2\x91\x4a\x77\x89\x47" +
		"\x10\x69\x4b\x83\xee\xab\x51\xac\xa4\x56\xbf\x29\xc5\x00\x10\xc0\x61\x75\x04\x30\x47\xf0\xb7\x85\xea\xaf\xff\xd7" +
		"\x18\xa0\xe7\xf6\x09\x66\x60\xe7\xf5\x96\x4e\xb0\x7b\xf7\x33\x08\x7a\xd9\x2e\x50\xc6\xb2\x34\x09\x59\xc4\x87\xff" +
		"\xf0\x27\x84\x73\xa3\x13\xfb\x19\xba\xc0\x4e\xbc\x0e\xe7\xc1\x3d\xf1\x42\x7e\xdb\x05\xcd\x42\xea\x67\x45\x70\x43" +
		"\xdb\x22\xee\xaf\xcd\x9a\x41\x26\x5d\xc5\x58\xce\xa6\xc9\x9c\xde\x7b\x1e\xa5\xd2\x2f\xfb\x7f\x59\x7d\xd6\xbb\xde" +
		"\xa5\xf5\x05\x7a\x5d\xf8\xc7\xe8\xfb\x1f\x75\xbf\xa9\x6d\xef\xe1\x5d\xff\x04\x00\x00\xff\xff\x6d\x17\x48\xf3\x32" +
		"\x04\x00\x00")

func bindataJmxfetchtmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataJmxfetchtmpl,
		"/jmxfetch.tmpl",
	)
}

func bindataJmxfetchtmpl() (*asset, error) {
	bytes, err := bindataJmxfetchtmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/jmxfetch.tmpl",
		size:        1074,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1581504032, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataLogsagenttmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x8b\xe4\x36\x10\xbd\xf7\xaf\x78\x34\x7b\xc8\x0e\x33\xee\x7b" +
		"\xc3\x1c\xc2\xee\x42\x02\x21\x59\xd8\x86\x90\xd3\xa0\xb6\xcb\xb6\x18\x59\x72\x4a\xa5\x6e\x4c\xe3\xff\x1e\x24\xf9" +
		"\x6b\x77\x3a\xec\xf8\x64\x55\xbd\x7a\xf5\x4a\xf5\xec\xdb\xed\x09\x87\x87\xdd\x9f\x7f\x9d\xbe\x1c\xf1\xa9\x55\xb6" +
		"\x21\x8f\x4e\x55\x04\x71\x90\x56\x7b\x08\x75\xbd\x51\x42\xf0\xad\x0b\xa6\xc2\x99\xc0\x54\x1b\x2a\x85\x2a\x38\x0b" +
		"\x69\x09\xb5\x33\xc6\x5d\xb5\x6d\x16\xb4\x7f\x84\xae\xa1\xfa\xde\xe8\x52\x9d\x0d\x1d\x77\x0f\x28\xbb\xea\xa0\x1a" +
		"\xb2\x72\x68\x82\x3e\x5c\x34\x5d\xfd\x61\xc1\x1f\x1a\xb2\xc4\xca\x7c\x13\x25\xc1\x17\xd2\xf5\x66\xf7\x70\xc0\xd3" +
		"\x38\xee\x9e\x97\x67\xf7\x87\x6b\x3c\x7e\x8d\x1c\xdb\x68\x1c\x42\xd7\xa0\x7f\x51\x68\xff\xc2\xc1\xda\x28\xa5\x56" +
		"\xc6\x13\xc6\x71\xb7\x03\xd6\x3a\x68\x0f\xeb\x04\x13\x2a\xd5\x92\xad\x12\x6e\xe2\x29\xc8\x56\xbd\xd3\x56\xfc\x54" +
		"\x1d\xe3\x1c\xaf\x06\x1f\xe6\x14\x8e\xcf\x3f\xe0\x80\x08\xdc\x20\x52\x6c\x43\x7f\xa7\x93\xb2\x15\x7e\x89\xb2\x83" +
		"\xa7\x97\x56\xa4\xcf\xa2\x3f\xe6\xe0\x66\x16\xe1\x40\x1f\x27\x35\xc0\x3f\x2e\x40\x31\xa1\x0c\xcc\x64\xc5\x0c\xf0" +
		"\x64\xab\x88\x4b\x73\x8a\xc3\x67\x25\xaa\x72\x0d\xa4\x65\x17\x9a\x16\xa7\x4f\x5f\x0b\x9c\x1c\xce\x64\xa9\xd6\x82" +
		"\x9a\x5d\x07\x6d\x4b\x26\xe5\xa9\x02\x93\xd1\xea\xac\x8d\x96\x21\x69\x3a\x93\x08\x31\x2c\xc9\xd5\xf1\x2b\x7a\xe2" +
		"\xda\x71\xa7\x6c\x19\xf7\x7a\x25\x78\x61\x67\x1b\x33\x80\x6c\xe9\x02\xab\x26\xd9\xc5\x5f\xb5\x94\x2d\xdc\x85\x18" +
		"\xa5\xeb\x7a\x26\x1f\xc9\x7f\x3b\x9d\xbe\x7e\xc3\x79\x40\xf0\x69\x94\x96\x60\x5c\xe3\x5f\x4a\x67\x6b\xdd\xac\xa3" +
		"\xc7\xc6\x3f\x26\x66\x1a\xed\x2c\x7a\xc5\xaa\x23\x21\xf6\x05\x4e\xd1\x99\x57\x6d\x0c\xce\x54\xba\x8e\x12\x6b\x45" +
		"\xb5\x0a\x46\xd0\xb3\x13\x57\x3a\x03\x9d\xdd\x99\xf7\x5e\x07\x09\x4c\xb8\x10\x47\xb6\x62\x77\xbb\xbd\xd9\x7b\x47" +
		"\xc2\xba\xbc\xb3\xf5\x9c\x78\xb1\xaa\xa3\xc7\xe5\x74\x51\x26\x50\xf2\xc1\xa6\x2e\xbb\x60\x5b\x30\x8e\xc7\x4d\x24" +
		"\x15\xbd\xc3\x19\x05\x31\x3b\x9e\xa5\x7c\x49\x87\x54\x84\x9e\xb5\x95\xcf\xca\xb7\xe4\xb1\xcf\x89\x3d\xf6\xcf\xfb" +
		"\xd5\x6f\xb3\x55\x63\x2e\xfb\x74\xe1\x5a\x4c\x9a\x72\xef\xd1\x71\x55\x1c\x1d\x38\x2b\xf9\x7b\x3a\xde\xd1\x32\x23" +
		"\xef\xab\x99\xb2\x49\xcf\x96\x73\x56\x34\xe7\x7f\xa6\x29\xd3\x15\xda\x0a\x35\xac\x44\x3b\xbb\xee\x0b\x45\xbc\xf0" +
		"\x99\xe2\x3b\x75\x39\xb3\x7f\x7a\x23\xac\xf0\x2e\x70\x49\x8b\x96\xd3\xd0\xd3\x31\x71\xc9\xd0\xd3\xaa\x70\x19\xe4" +
		"\x95\x86\x47\x7c\x58\x97\x9f\xdd\x1a\xb2\x96\x8d\x05\x5e\x69\x98\x56\xbf\xee\xfc\xbb\xc9\xe2\x31\xff\xed\x72\x3f" +
		"\x9f\xde\xef\x74\xec\xc8\xfb\xf8\x89\x65\xab\xa5\xf7\x05\x96\x2f\x6f\x46\xdc\x6f\x32\xaf\x52\xdb\x3e\xac\xff\xaa" +
		"\xdf\xd3\x29\xb5\x9e\xfa\xa4\x7c\xea\xb2\x20\x6f\xb7\x1c\x1d\x47\xac\xdf\xcb\x9b\x16\xff\xb3\xae\xff\x02\x00\x00" +
		"\xff\xff\x62\xad\x3d\xd5\x5c\x06\x00\x00")

func bindataLogsagenttmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataLogsagenttmpl,
		"/logsagent.tmpl",
	)
}

func bindataLogsagenttmpl() (*asset, error) {
	bytes, err := bindataLogsagenttmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/logsagent.tmpl",
		size:        1628,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1583318735, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataMetadatamappertmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\x6a\xc3\x30\x10\x84\xef\x7a\x8a\x39\xf8\x18\xf7\x01\x0c\x39" +
		"\x95\xde\x9a\x50\x28\xa5\xc7\x22\xac\x6d\x6a\x88\x25\xa1\xdd\x84\x16\xa1\x77\x2f\xfa\x71\xec\x16\x4a\x7d\x5a\x7b" +
		"\x66\xbe\x1d\xef\xfe\xe7\xa3\x0e\x24\xda\x68\xd1\x38\x68\xef\x29\xa8\xdf\x7a\x8c\x3d\xa6\x77\xdc\x3d\x84\xe0\x02" +
		"\x23\x25\xa5\xee\xdd\xe5\x6c\x60\x9d\x20\x5c\x2c\xe4\x83\xc0\x14\xae\xd3\x48\x98\x0b\x63\x40\x8c\xcd\x9f\x92\x8a" +
		"\x91\xce\x4c\x65\x28\xa0\x57\x1d\xec\x64\x4f\x8c\x3e\x25\xb5\xbc\x0c\x65\x4f\xd0\xf6\x44\xab\x23\x25\x05\xa0\xcf" +
		"\xb4\x1a\x27\x6b\x4a\x2a\x7b\xb7\x73\xc6\x1e\x9d\xa1\x52\x6f\x05\x75\x93\x35\xf4\xb9\x43\x37\x93\xe8\x37\xf9\xf2" +
		"\x84\x61\xbf\x71\xe6\x01\x86\x84\x46\x21\x93\x4b\xb7\xc4\x8d\xdb\x30\x73\x8e\x6d\x20\xa5\x57\x8c\x8b\x6c\x79\x87" +
		"\xce\x3b\xc3\xd5\x56\xe5\x1e\x47\x3d\x13\x7b\x3d\x52\x25\xdb\xfa\xc3\x40\x8e\xde\xd0\xde\x99\x1d\x3a\xbe\x8e\x35" +
		"\x5c\x28\xcd\x95\x19\x4f\xae\xf5\xf2\xce\xac\xdf\x81\xe7\x7a\x6f\x2e\xa2\xb8\x17\xcb\x2e\x08\x99\xc7\x89\xa5\xd1" +
		"\xd6\x5d\xe5\x52\x4b\xe5\xbf\x2e\xf8\xdf\xfc\x1d\x00\x00\xff\xff\x14\x40\xfd\xfe\x36\x02\x00\x00")

func bindataMetadatamappertmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataMetadatamappertmpl,
		"/metadatamapper.tmpl",
	)
}

func bindataMetadatamappertmpl() (*asset, error) {
	bytes, err := bindataMetadatamappertmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/metadatamapper.tmpl",
		size:        566,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1581504032, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/aggregator.tmpl":            bindataAggregatortmpl,
	"/clusteragent.tmpl":          bindataClusteragenttmpl,
	"/collector.tmpl":             bindataCollectortmpl,
	"/custommetricsprovider.tmpl": bindataCustommetricsprovidertmpl,
	"/dogstatsd.tmpl":             bindataDogstatsdtmpl,
	"/endpoints.tmpl":             bindataEndpointstmpl,
	"/forwarder.tmpl":             bindataForwardertmpl,
	"/header.tmpl":                bindataHeadertmpl,
	"/jmxfetch.tmpl":              bindataJmxfetchtmpl,
	"/logsagent.tmpl":             bindataLogsagenttmpl,
	"/metadatamapper.tmpl":        bindataMetadatamappertmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"aggregator.tmpl":            {Func: bindataAggregatortmpl, Children: map[string]*bintree{}},
		"clusteragent.tmpl":          {Func: bindataClusteragenttmpl, Children: map[string]*bintree{}},
		"collector.tmpl":             {Func: bindataCollectortmpl, Children: map[string]*bintree{}},
		"custommetricsprovider.tmpl": {Func: bindataCustommetricsprovidertmpl, Children: map[string]*bintree{}},
		"dogstatsd.tmpl":             {Func: bindataDogstatsdtmpl, Children: map[string]*bintree{}},
		"endpoints.tmpl":             {Func: bindataEndpointstmpl, Children: map[string]*bintree{}},
		"forwarder.tmpl":             {Func: bindataForwardertmpl, Children: map[string]*bintree{}},
		"header.tmpl":                {Func: bindataHeadertmpl, Children: map[string]*bintree{}},
		"jmxfetch.tmpl":              {Func: bindataJmxfetchtmpl, Children: map[string]*bintree{}},
		"logsagent.tmpl":             {Func: bindataLogsagenttmpl, Children: map[string]*bintree{}},
		"metadatamapper.tmpl":        {Func: bindataMetadatamappertmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
