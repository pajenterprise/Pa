// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2018 Datadog, Inc.

package config

import (
	"fmt"
	"strings"
)

// Option describes a configuration option
type Option struct {
	// Common fields
	Name         string
	DefaultValue interface{}
	Description  string
	Undocumented bool // For internal options not to expose in docs

	// datadog.yaml contents
	DefaultAsString string // Set the field if the automatic formating is wrong
	YAMLDesc        string // Defaults to Description if empty
	SkipYAMLDesc    bool   // Will skip the description/YAMLDesc line
	YAMLExample     string // Autogenerated from Default if empty
	SkipYAMLExample bool   // Will skip the example/YAMLExample line

	// envvar bindings option
	NoEnvvar   bool   // Don't bind this option to an envvar
	EnvvarDesc string // Defaults to Description if empty

	// Nested options
	SubOptions []*Option

	// Computed by prepareOptions
	viperName string // Computed for nested options
}

func (o *Option) Envvar() string {
	return fmt.Sprintf("%s_%s", envvarPrefix, envvarReplacer.Replace(strings.ToUpper(o.viperName)))
}

func (o *Option) YAMLDefault() string {
	if o.DefaultAsString != "" {
		return o.DefaultAsString
	}
	if o.DefaultValue != nil {
		return fmt.Sprintf("%v", o.DefaultValue)
	}
	return ""
}

// Group describes a group of options to display together
type Group struct {
	Name        string
	Priority    int       // Sections will be listed in ascending order
	Description string    // Multiline description of the section
	Options     []*Option // Options will be listed in order
}

// Groups is a slice of *Group, implements sort.Interface
type Groups []*Group

func (slice Groups) Len() int { return len(slice) }
func (slice Groups) Less(i, j int) bool {
	if slice[i].Priority == slice[j].Priority {
		return slice[i].Name < slice[j].Name
	}
	return slice[i].Priority < slice[j].Priority
}
func (slice Groups) Swap(i, j int) { slice[i], slice[j] = slice[j], slice[i] }
