// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flare.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Flare
type FlareLogLevel int32

const (
	FlareLogLevel_TRACE FlareLogLevel = 0
	FlareLogLevel_DEBUG FlareLogLevel = 1
	FlareLogLevel_INFO  FlareLogLevel = 2
	FlareLogLevel_WARN  FlareLogLevel = 3
	FlareLogLevel_ERROR FlareLogLevel = 4
)

var FlareLogLevel_name = map[int32]string{
	0: "TRACE",
	1: "DEBUG",
	2: "INFO",
	3: "WARN",
	4: "ERROR",
}

var FlareLogLevel_value = map[string]int32{
	"TRACE": 0,
	"DEBUG": 1,
	"INFO":  2,
	"WARN":  3,
	"ERROR": 4,
}

func (x FlareLogLevel) String() string {
	return proto.EnumName(FlareLogLevel_name, int32(x))
}

func (FlareLogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f59e92f58d30fe9, []int{0}
}

type FlareHeartbeatRequest struct {
	TracerIdentifier     string   `protobuf:"bytes,1,opt,name=tracer_identifier,json=tracerIdentifier,proto3" json:"tracer_identifier,omitempty"`
	TracerService        string   `protobuf:"bytes,2,opt,name=tracer_service,json=tracerService,proto3" json:"tracer_service,omitempty"`
	TracerEnvironment    string   `protobuf:"bytes,3,opt,name=tracer_environment,json=tracerEnvironment,proto3" json:"tracer_environment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlareHeartbeatRequest) Reset()         { *m = FlareHeartbeatRequest{} }
func (m *FlareHeartbeatRequest) String() string { return proto.CompactTextString(m) }
func (*FlareHeartbeatRequest) ProtoMessage()    {}
func (*FlareHeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f59e92f58d30fe9, []int{0}
}

func (m *FlareHeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlareHeartbeatRequest.Unmarshal(m, b)
}
func (m *FlareHeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlareHeartbeatRequest.Marshal(b, m, deterministic)
}
func (m *FlareHeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlareHeartbeatRequest.Merge(m, src)
}
func (m *FlareHeartbeatRequest) XXX_Size() int {
	return xxx_messageInfo_FlareHeartbeatRequest.Size(m)
}
func (m *FlareHeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlareHeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlareHeartbeatRequest proto.InternalMessageInfo

func (m *FlareHeartbeatRequest) GetTracerIdentifier() string {
	if m != nil {
		return m.TracerIdentifier
	}
	return ""
}

func (m *FlareHeartbeatRequest) GetTracerService() string {
	if m != nil {
		return m.TracerService
	}
	return ""
}

func (m *FlareHeartbeatRequest) GetTracerEnvironment() string {
	if m != nil {
		return m.TracerEnvironment
	}
	return ""
}

type FlareHeartbeatResponse struct {
	Trigger              *FlareHeartbeatResponse_Trigger `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *FlareHeartbeatResponse) Reset()         { *m = FlareHeartbeatResponse{} }
func (m *FlareHeartbeatResponse) String() string { return proto.CompactTextString(m) }
func (*FlareHeartbeatResponse) ProtoMessage()    {}
func (*FlareHeartbeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f59e92f58d30fe9, []int{1}
}

func (m *FlareHeartbeatResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlareHeartbeatResponse.Unmarshal(m, b)
}
func (m *FlareHeartbeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlareHeartbeatResponse.Marshal(b, m, deterministic)
}
func (m *FlareHeartbeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlareHeartbeatResponse.Merge(m, src)
}
func (m *FlareHeartbeatResponse) XXX_Size() int {
	return xxx_messageInfo_FlareHeartbeatResponse.Size(m)
}
func (m *FlareHeartbeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FlareHeartbeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FlareHeartbeatResponse proto.InternalMessageInfo

func (m *FlareHeartbeatResponse) GetTrigger() *FlareHeartbeatResponse_Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

type FlareHeartbeatResponse_Trigger struct {
	FlareIdentifier string `protobuf:"bytes,1,opt,name=flare_identifier,json=flareIdentifier,proto3" json:"flare_identifier,omitempty"`
	// should supply with the log
	// request to be able to
	// correlate the log lines with
	// a specific flare request.
	LogLevel FlareLogLevel `protobuf:"varint,2,opt,name=log_level,json=logLevel,proto3,enum=pb.FlareLogLevel" json:"log_level,omitempty"`
	// should switch to.
	EndTime              int64    `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlareHeartbeatResponse_Trigger) Reset()         { *m = FlareHeartbeatResponse_Trigger{} }
func (m *FlareHeartbeatResponse_Trigger) String() string { return proto.CompactTextString(m) }
func (*FlareHeartbeatResponse_Trigger) ProtoMessage()    {}
func (*FlareHeartbeatResponse_Trigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f59e92f58d30fe9, []int{1, 0}
}

func (m *FlareHeartbeatResponse_Trigger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlareHeartbeatResponse_Trigger.Unmarshal(m, b)
}
func (m *FlareHeartbeatResponse_Trigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlareHeartbeatResponse_Trigger.Marshal(b, m, deterministic)
}
func (m *FlareHeartbeatResponse_Trigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlareHeartbeatResponse_Trigger.Merge(m, src)
}
func (m *FlareHeartbeatResponse_Trigger) XXX_Size() int {
	return xxx_messageInfo_FlareHeartbeatResponse_Trigger.Size(m)
}
func (m *FlareHeartbeatResponse_Trigger) XXX_DiscardUnknown() {
	xxx_messageInfo_FlareHeartbeatResponse_Trigger.DiscardUnknown(m)
}

var xxx_messageInfo_FlareHeartbeatResponse_Trigger proto.InternalMessageInfo

func (m *FlareHeartbeatResponse_Trigger) GetFlareIdentifier() string {
	if m != nil {
		return m.FlareIdentifier
	}
	return ""
}

func (m *FlareHeartbeatResponse_Trigger) GetLogLevel() FlareLogLevel {
	if m != nil {
		return m.LogLevel
	}
	return FlareLogLevel_TRACE
}

func (m *FlareHeartbeatResponse_Trigger) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type FlareQueryRequest struct {
	Query                *FlareHeartbeatRequest `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *FlareQueryRequest) Reset()         { *m = FlareQueryRequest{} }
func (m *FlareQueryRequest) String() string { return proto.CompactTextString(m) }
func (*FlareQueryRequest) ProtoMessage()    {}
func (*FlareQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f59e92f58d30fe9, []int{2}
}

func (m *FlareQueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlareQueryRequest.Unmarshal(m, b)
}
func (m *FlareQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlareQueryRequest.Marshal(b, m, deterministic)
}
func (m *FlareQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlareQueryRequest.Merge(m, src)
}
func (m *FlareQueryRequest) XXX_Size() int {
	return xxx_messageInfo_FlareQueryRequest.Size(m)
}
func (m *FlareQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlareQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlareQueryRequest proto.InternalMessageInfo

func (m *FlareQueryRequest) GetQuery() *FlareHeartbeatRequest {
	if m != nil {
		return m.Query
	}
	return nil
}

type FlareQueryResponse struct {
	Answer               []*FlareHeartbeatRequest `protobuf:"bytes,1,rep,name=answer,proto3" json:"answer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *FlareQueryResponse) Reset()         { *m = FlareQueryResponse{} }
func (m *FlareQueryResponse) String() string { return proto.CompactTextString(m) }
func (*FlareQueryResponse) ProtoMessage()    {}
func (*FlareQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f59e92f58d30fe9, []int{3}
}

func (m *FlareQueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlareQueryResponse.Unmarshal(m, b)
}
func (m *FlareQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlareQueryResponse.Marshal(b, m, deterministic)
}
func (m *FlareQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlareQueryResponse.Merge(m, src)
}
func (m *FlareQueryResponse) XXX_Size() int {
	return xxx_messageInfo_FlareQueryResponse.Size(m)
}
func (m *FlareQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FlareQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FlareQueryResponse proto.InternalMessageInfo

func (m *FlareQueryResponse) GetAnswer() []*FlareHeartbeatRequest {
	if m != nil {
		return m.Answer
	}
	return nil
}

type FlareLogRequest struct {
	FlareIdentifier      string                     `protobuf:"bytes,1,opt,name=flare_identifier,json=flareIdentifier,proto3" json:"flare_identifier,omitempty"`
	TracerIdentifier     string                     `protobuf:"bytes,2,opt,name=tracer_identifier,json=tracerIdentifier,proto3" json:"tracer_identifier,omitempty"`
	Logs                 []*FlareLogRequest_LogLine `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *FlareLogRequest) Reset()         { *m = FlareLogRequest{} }
func (m *FlareLogRequest) String() string { return proto.CompactTextString(m) }
func (*FlareLogRequest) ProtoMessage()    {}
func (*FlareLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f59e92f58d30fe9, []int{4}
}

func (m *FlareLogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlareLogRequest.Unmarshal(m, b)
}
func (m *FlareLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlareLogRequest.Marshal(b, m, deterministic)
}
func (m *FlareLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlareLogRequest.Merge(m, src)
}
func (m *FlareLogRequest) XXX_Size() int {
	return xxx_messageInfo_FlareLogRequest.Size(m)
}
func (m *FlareLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlareLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlareLogRequest proto.InternalMessageInfo

func (m *FlareLogRequest) GetFlareIdentifier() string {
	if m != nil {
		return m.FlareIdentifier
	}
	return ""
}

func (m *FlareLogRequest) GetTracerIdentifier() string {
	if m != nil {
		return m.TracerIdentifier
	}
	return ""
}

func (m *FlareLogRequest) GetLogs() []*FlareLogRequest_LogLine {
	if m != nil {
		return m.Logs
	}
	return nil
}

type FlareLogRequest_LogLine struct {
	// relevant?
	LogLevel             FlareLogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=pb.FlareLogLevel" json:"log_level,omitempty"`
	Message              string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FlareLogRequest_LogLine) Reset()         { *m = FlareLogRequest_LogLine{} }
func (m *FlareLogRequest_LogLine) String() string { return proto.CompactTextString(m) }
func (*FlareLogRequest_LogLine) ProtoMessage()    {}
func (*FlareLogRequest_LogLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f59e92f58d30fe9, []int{4, 0}
}

func (m *FlareLogRequest_LogLine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlareLogRequest_LogLine.Unmarshal(m, b)
}
func (m *FlareLogRequest_LogLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlareLogRequest_LogLine.Marshal(b, m, deterministic)
}
func (m *FlareLogRequest_LogLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlareLogRequest_LogLine.Merge(m, src)
}
func (m *FlareLogRequest_LogLine) XXX_Size() int {
	return xxx_messageInfo_FlareLogRequest_LogLine.Size(m)
}
func (m *FlareLogRequest_LogLine) XXX_DiscardUnknown() {
	xxx_messageInfo_FlareLogRequest_LogLine.DiscardUnknown(m)
}

var xxx_messageInfo_FlareLogRequest_LogLine proto.InternalMessageInfo

func (m *FlareLogRequest_LogLine) GetLogLevel() FlareLogLevel {
	if m != nil {
		return m.LogLevel
	}
	return FlareLogLevel_TRACE
}

func (m *FlareLogRequest_LogLine) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FlareLogResponse struct {
	StopReason           string   `protobuf:"bytes,1,opt,name=stop_reason,json=stopReason,proto3" json:"stop_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlareLogResponse) Reset()         { *m = FlareLogResponse{} }
func (m *FlareLogResponse) String() string { return proto.CompactTextString(m) }
func (*FlareLogResponse) ProtoMessage()    {}
func (*FlareLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f59e92f58d30fe9, []int{5}
}

func (m *FlareLogResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlareLogResponse.Unmarshal(m, b)
}
func (m *FlareLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlareLogResponse.Marshal(b, m, deterministic)
}
func (m *FlareLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlareLogResponse.Merge(m, src)
}
func (m *FlareLogResponse) XXX_Size() int {
	return xxx_messageInfo_FlareLogResponse.Size(m)
}
func (m *FlareLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FlareLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FlareLogResponse proto.InternalMessageInfo

func (m *FlareLogResponse) GetStopReason() string {
	if m != nil {
		return m.StopReason
	}
	return ""
}

func init() {
	proto.RegisterEnum("pb.FlareLogLevel", FlareLogLevel_name, FlareLogLevel_value)
	proto.RegisterType((*FlareHeartbeatRequest)(nil), "pb.FlareHeartbeatRequest")
	proto.RegisterType((*FlareHeartbeatResponse)(nil), "pb.FlareHeartbeatResponse")
	proto.RegisterType((*FlareHeartbeatResponse_Trigger)(nil), "pb.FlareHeartbeatResponse.Trigger")
	proto.RegisterType((*FlareQueryRequest)(nil), "pb.FlareQueryRequest")
	proto.RegisterType((*FlareQueryResponse)(nil), "pb.FlareQueryResponse")
	proto.RegisterType((*FlareLogRequest)(nil), "pb.FlareLogRequest")
	proto.RegisterType((*FlareLogRequest_LogLine)(nil), "pb.FlareLogRequest.LogLine")
	proto.RegisterType((*FlareLogResponse)(nil), "pb.FlareLogResponse")
}

func init() { proto.RegisterFile("flare.proto", fileDescriptor_4f59e92f58d30fe9) }

var fileDescriptor_4f59e92f58d30fe9 = []byte{
	// 599 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xd1, 0x4e, 0x13, 0x41,
	0x14, 0x75, 0xb7, 0x40, 0xcb, 0x45, 0x60, 0x19, 0x85, 0x94, 0x95, 0x44, 0xdc, 0x84, 0xa8, 0x10,
	0x77, 0x03, 0x3c, 0x49, 0x8c, 0x09, 0xda, 0x82, 0x24, 0x04, 0xe2, 0x50, 0xe3, 0x63, 0xb3, 0x6d,
	0x6f, 0xd7, 0x4d, 0xb6, 0x33, 0xcb, 0xec, 0xb0, 0xc6, 0x34, 0xc4, 0xc4, 0x5f, 0xf0, 0xcd, 0xdf,
	0xf2, 0xc1, 0x1f, 0xe0, 0xdd, 0x5f, 0x30, 0x3b, 0x3b, 0x5b, 0xda, 0xd2, 0x6a, 0x7c, 0x9b, 0x3d,
	0x73, 0xe6, 0x9e, 0x39, 0xf7, 0x9e, 0x59, 0x58, 0xe8, 0x46, 0xbe, 0x40, 0x37, 0x16, 0x5c, 0x72,
	0x62, 0xc6, 0x2d, 0x7b, 0x23, 0xe0, 0x3c, 0x88, 0xd0, 0xf3, 0xe3, 0xd0, 0xf3, 0x19, 0xe3, 0xd2,
	0x97, 0x21, 0x67, 0x49, 0xce, 0x70, 0x7e, 0x18, 0xb0, 0x7a, 0x94, 0x9d, 0x78, 0x87, 0xbe, 0x90,
	0x2d, 0xf4, 0x25, 0xc5, 0xcb, 0x2b, 0x4c, 0x24, 0xd9, 0x81, 0x15, 0x29, 0xfc, 0x36, 0x8a, 0x66,
	0xd8, 0x41, 0x26, 0xc3, 0x6e, 0x88, 0xa2, 0x6a, 0x6c, 0x1a, 0xcf, 0xe6, 0xa9, 0x95, 0x6f, 0x9c,
	0x0c, 0x70, 0xb2, 0x05, 0x4b, 0x9a, 0x9c, 0xa0, 0x48, 0xc3, 0x36, 0x56, 0x4d, 0xc5, 0x5c, 0xcc,
	0xd1, 0x8b, 0x1c, 0x24, 0x2f, 0x80, 0x68, 0x1a, 0xb2, 0x34, 0x14, 0x9c, 0xf5, 0x90, 0xc9, 0x6a,
	0x49, 0x51, 0xb5, 0x5a, 0xfd, 0x76, 0xc3, 0xf9, 0x65, 0xc0, 0xda, 0xf8, 0xe5, 0x92, 0x98, 0xb3,
	0x04, 0xc9, 0x2b, 0x28, 0x4b, 0x11, 0x06, 0x81, 0xbe, 0xd3, 0xc2, 0x9e, 0xe3, 0xc6, 0x2d, 0x77,
	0x32, 0xd9, 0x6d, 0xe4, 0x4c, 0x5a, 0x1c, 0xb1, 0xbf, 0x42, 0x59, 0x63, 0xe4, 0x39, 0x58, 0xaa,
	0x63, 0x77, 0x5d, 0x2e, 0x2b, 0x7c, 0xc8, 0xa4, 0x0b, 0xf3, 0x11, 0x0f, 0x9a, 0x11, 0xa6, 0x18,
	0x29, 0x7f, 0x4b, 0x7b, 0x2b, 0x03, 0xd5, 0x53, 0x1e, 0x9c, 0x66, 0x1b, 0xb4, 0x12, 0xe9, 0x15,
	0x59, 0x87, 0x0a, 0xb2, 0x4e, 0x53, 0x86, 0x3d, 0x54, 0x1e, 0x4b, 0xb4, 0x8c, 0xac, 0xd3, 0x08,
	0x7b, 0xe8, 0xd4, 0x60, 0x45, 0x9d, 0x7a, 0x7f, 0x85, 0xe2, 0x4b, 0xd1, 0x71, 0x0f, 0x66, 0x2f,
	0xb3, 0x6f, 0xed, 0x68, 0x7d, 0x92, 0x23, 0xc5, 0xa4, 0x39, 0xcf, 0x39, 0x06, 0x32, 0x5c, 0x45,
	0xb7, 0x66, 0x17, 0xe6, 0x7c, 0x96, 0x7c, 0x56, 0x3e, 0x4a, 0x7f, 0xaf, 0xa3, 0x89, 0xce, 0x6f,
	0x03, 0x96, 0x0b, 0x17, 0xc5, 0x6d, 0xfe, 0xa3, 0x31, 0x13, 0xa3, 0x62, 0x4e, 0x89, 0x8a, 0x07,
	0x33, 0x11, 0x0f, 0x92, 0x6a, 0x49, 0x5d, 0xee, 0xd1, 0x70, 0x03, 0xb5, 0xb4, 0x9b, 0xf5, 0x32,
	0x64, 0x48, 0x15, 0xd1, 0xbe, 0x80, 0xb2, 0x06, 0x46, 0x27, 0x60, 0xfc, 0x7b, 0x02, 0x55, 0x28,
	0xf7, 0x30, 0x49, 0xfc, 0xa0, 0xc8, 0x63, 0xf1, 0xe9, 0xec, 0x83, 0x75, 0xab, 0xaa, 0x1b, 0xf7,
	0x18, 0x16, 0x12, 0xc9, 0xe3, 0xa6, 0x40, 0x3f, 0xe1, 0x4c, 0x9b, 0x85, 0x0c, 0xa2, 0x0a, 0xd9,
	0xae, 0xc1, 0xe2, 0x88, 0x12, 0x99, 0x87, 0xd9, 0x06, 0x3d, 0x7c, 0x5b, 0xb7, 0xee, 0x65, 0xcb,
	0x5a, 0xfd, 0xcd, 0x87, 0x63, 0xcb, 0x20, 0x15, 0x98, 0x39, 0x39, 0x3b, 0x3a, 0xb7, 0xcc, 0x6c,
	0xf5, 0xf1, 0x90, 0x9e, 0x59, 0xa5, 0x6c, 0xbb, 0x4e, 0xe9, 0x39, 0xb5, 0x66, 0xf6, 0x6e, 0x4c,
	0x98, 0x55, 0x65, 0x48, 0x0a, 0x96, 0x7e, 0x19, 0x83, 0xc9, 0x90, 0xe9, 0xd3, 0xb2, 0xed, 0xe9,
	0x11, 0x77, 0x76, 0xbe, 0xfd, 0xbc, 0xf9, 0x6e, 0x6e, 0x39, 0x9b, 0x5e, 0xba, 0xeb, 0x05, 0x22,
	0x6e, 0x7b, 0x6a, 0x48, 0x9e, 0x7e, 0x8e, 0xcd, 0x4f, 0xc5, 0x89, 0x03, 0x63, 0x9b, 0x74, 0xe1,
	0xbe, 0xd6, 0x55, 0xc9, 0x21, 0xab, 0x83, 0xc2, 0xc3, 0x79, 0xb4, 0xd7, 0xc6, 0x61, 0xad, 0xf5,
	0x54, 0x69, 0x3d, 0x71, 0x36, 0xa6, 0x68, 0xa9, 0x70, 0x66, 0x3a, 0x7d, 0xa8, 0x9c, 0xf2, 0xa0,
	0x9e, 0x22, 0x93, 0xe4, 0xc1, 0x84, 0x41, 0xdb, 0x0f, 0x47, 0x41, 0x5d, 0xbf, 0xa6, 0xea, 0xbf,
	0x76, 0x5e, 0x8e, 0xd5, 0x8f, 0x78, 0xe0, 0xf5, 0xc7, 0x33, 0x79, 0xed, 0xf5, 0xef, 0x64, 0xef,
	0xfa, 0xc0, 0xd8, 0x6e, 0xcd, 0xa9, 0x1f, 0xdc, 0xfe, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdd,
	0x1c, 0x2f, 0x3d, 0x11, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FlareClient is the client API for Flare service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlareClient interface {
	// get tracer heartbeat
	ServiceHeartbeat(ctx context.Context, in *FlareHeartbeatRequest, opts ...grpc.CallOption) (*FlareHeartbeatResponse, error)
	// make flare service request
	ServiceQuery(ctx context.Context, in *FlareQueryRequest, opts ...grpc.CallOption) (*FlareQueryResponse, error)
	// log events
	LogEvent(ctx context.Context, in *FlareLogRequest, opts ...grpc.CallOption) (*FlareLogResponse, error)
}

type flareClient struct {
	cc *grpc.ClientConn
}

func NewFlareClient(cc *grpc.ClientConn) FlareClient {
	return &flareClient{cc}
}

func (c *flareClient) ServiceHeartbeat(ctx context.Context, in *FlareHeartbeatRequest, opts ...grpc.CallOption) (*FlareHeartbeatResponse, error) {
	out := new(FlareHeartbeatResponse)
	err := c.cc.Invoke(ctx, "/pb.Flare/ServiceHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flareClient) ServiceQuery(ctx context.Context, in *FlareQueryRequest, opts ...grpc.CallOption) (*FlareQueryResponse, error) {
	out := new(FlareQueryResponse)
	err := c.cc.Invoke(ctx, "/pb.Flare/ServiceQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flareClient) LogEvent(ctx context.Context, in *FlareLogRequest, opts ...grpc.CallOption) (*FlareLogResponse, error) {
	out := new(FlareLogResponse)
	err := c.cc.Invoke(ctx, "/pb.Flare/LogEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlareServer is the server API for Flare service.
type FlareServer interface {
	// get tracer heartbeat
	ServiceHeartbeat(context.Context, *FlareHeartbeatRequest) (*FlareHeartbeatResponse, error)
	// make flare service request
	ServiceQuery(context.Context, *FlareQueryRequest) (*FlareQueryResponse, error)
	// log events
	LogEvent(context.Context, *FlareLogRequest) (*FlareLogResponse, error)
}

// UnimplementedFlareServer can be embedded to have forward compatible implementations.
type UnimplementedFlareServer struct {
}

func (*UnimplementedFlareServer) ServiceHeartbeat(ctx context.Context, req *FlareHeartbeatRequest) (*FlareHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceHeartbeat not implemented")
}
func (*UnimplementedFlareServer) ServiceQuery(ctx context.Context, req *FlareQueryRequest) (*FlareQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceQuery not implemented")
}
func (*UnimplementedFlareServer) LogEvent(ctx context.Context, req *FlareLogRequest) (*FlareLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogEvent not implemented")
}

func RegisterFlareServer(s *grpc.Server, srv FlareServer) {
	s.RegisterService(&_Flare_serviceDesc, srv)
}

func _Flare_ServiceHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlareHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlareServer).ServiceHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Flare/ServiceHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlareServer).ServiceHeartbeat(ctx, req.(*FlareHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flare_ServiceQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlareQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlareServer).ServiceQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Flare/ServiceQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlareServer).ServiceQuery(ctx, req.(*FlareQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flare_LogEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlareLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlareServer).LogEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Flare/LogEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlareServer).LogEvent(ctx, req.(*FlareLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Flare_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Flare",
	HandlerType: (*FlareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceHeartbeat",
			Handler:    _Flare_ServiceHeartbeat_Handler,
		},
		{
			MethodName: "ServiceQuery",
			Handler:    _Flare_ServiceQuery_Handler,
		},
		{
			MethodName: "LogEvent",
			Handler:    _Flare_LogEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flare.proto",
}
