// Code generated by go-bindata.
// sources:
// pkg/ebpf/netlink/c/nat_filter.o
// pkg/ebpf/netlink/c/nat_filter-debug.o
// DO NOT EDIT!

package netlink

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nat_filterO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x3d\x4b\x03\x41\x10\x7d\x9b\x9c\x1a\x8d\x85\x5a\x29\x58\x08\xf6\xab\x8d\x96\x1a\x02\x26\x85\x29\x44\x22\x58\x08\x67\x12\x36\x18\xcd\x87\xdc\x2d\x6a\x44\xf0\x2f\xd8\x58\xeb\x4f\xf2\x67\x08\x56\x56\x76\xae\xdc\x39\xeb\x2d\x73\x77\x9c\x0f\x36\xb3\xf3\x76\xde\xcc\xec\x66\xee\xf1\xa0\xd5\x28\x09\x01\x0b\x81\x2f\x24\x5e\x82\x77\x87\xac\xd1\x6f\x15\x02\xab\x00\x8c\x31\xc6\x9e\x3d\x93\xfd\x36\xc6\x34\x8f\x5a\x78\xf9\xf8\x8d\x71\x11\xa7\x72\x0f\x3c\x67\x55\x00\x2c\x25\xb1\x76\x2b\xee\x8f\x51\x79\xa8\x8a\x45\x20\x96\xb9\x39\x79\xfe\x2c\x9c\xc4\xe9\x3f\x4d\xd6\x59\x19\xe5\x14\xb7\x07\x60\x19\x33\x7f\xbe\x47\x76\x27\xe6\xbd\x14\x1f\xf5\xb9\xe2\xe4\xb1\x3d\xad\x3b\x77\x2e\x45\x1b\xa9\xd5\x9d\x86\xac\xb7\x1b\x32\xda\x84\x93\xde\x95\xd2\xbe\x3f\xee\x68\xbf\x3f\x18\x6a\x15\x10\xb5\xe5\x30\xfe\x8d\x0a\xc2\xc1\x64\x0c\x7f\x38\xe8\xa9\x71\xa8\x20\x03\x35\x94\xea\xc2\xef\x07\x9d\x91\x42\x12\x2a\x7b\x90\xa1\x0e\x74\xa7\x0b\x19\x4e\x47\xb1\xad\xb7\x1b\xff\x78\xa0\x02\x74\xe3\x77\x4a\xe3\x9a\xe6\xe2\x96\xf1\x7c\x86\x04\xad\x59\xc6\xd7\x72\xea\x79\xcc\xdf\x2c\xd0\xf3\x19\xa8\x30\x7f\x97\xf4\xfc\x0e\xa7\x39\xf5\xb8\xbf\x9f\xa3\x3f\xcb\x89\xe7\xf7\x0f\x32\xb8\x08\xe7\x64\xd7\x0a\xf4\x73\x39\xfa\x29\xd9\x8d\x02\xfd\xa1\x3b\x83\x0e\x5e\xc9\x6e\x33\x9e\xbf\x5f\x13\xc0\x7c\x56\xff\x54\xc8\x7e\xa7\x0b\xa4\xb5\x7a\xcb\x5f\x66\xd4\x8e\xf0\x46\xf6\xc9\xe9\xbb\xec\xe8\xed\xff\xfa\x13\x00\x00\xff\xff\x26\xdd\xbc\xd8\xa8\x04\x00\x00")

func nat_filterOBytes() ([]byte, error) {
	return bindataRead(
		_nat_filterO,
		"nat_filter.o",
	)
}

func nat_filterO() (*asset, error) {
	bytes, err := nat_filterOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nat_filter.o", size: 1192, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nat_filterDebugO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xbf\xaf\x52\x31\x14\xfe\x0a\x08\x08\x0c\xe8\xa4\xc4\x01\xe3\x5e\xc5\x44\x47\x25\x24\x82\x89\x0c\xc6\xe0\x7c\xbd\x60\x89\x57\x7e\xdc\xa4\xb7\x11\x7f\x25\x4e\x3a\xbb\x38\xab\xbb\x03\x83\x09\xa3\xfe\x03\xfe\x25\x2e\x38\xf9\xa6\xd7\x97\x96\x36\xb7\x29\xf7\xe6\xbe\x2f\x29\xa7\xfd\x7a\xbe\x73\x4e\x0f\x07\x3e\x3c\x18\x0f\x4b\x84\xc0\x82\xe0\x3f\xd2\x53\x8a\x87\xa5\x74\xdf\x37\x9f\x2d\x10\xec\x08\x70\x1d\xc0\xa2\x73\x22\x15\x7b\x85\x00\x91\xe8\x6e\xd4\x3e\xe6\x8b\xe4\x5d\x67\xaf\xf9\x5f\xdf\x0f\xda\x1a\x01\xf6\x52\xca\x5d\x09\x68\x00\xf8\x08\xa0\xaa\x74\x00\xa4\x94\xd2\xe6\xf8\x62\xac\x8a\xa5\xe2\xa8\x1c\xa7\x52\xca\xd1\xe3\x31\xbe\xfe\x25\xda\xdf\x85\xae\xd9\xbd\xa8\x38\xab\x0e\xa0\x7d\xa0\xdb\xd6\xff\xed\x13\xd4\xdf\x37\x49\xcb\xe4\x76\xe3\x3d\xcb\x78\xbf\x8f\xa7\x3a\xf4\x3f\x99\x75\x57\x46\xf9\x88\xbb\x07\xe0\x92\x7e\x69\x5a\x9e\xc2\x1d\xcd\x5f\x38\xe2\x55\x9d\x97\x9d\x38\xb6\xa6\x6b\xce\x7b\xf5\x57\x42\x05\x7b\x2d\x40\x07\x93\x21\x55\x9b\x24\x9e\x2d\x98\x08\x82\x75\x28\x82\x79\xb4\x14\x8c\x1b\xea\xa6\xc3\x04\xaf\x18\x4f\xa2\x78\x8d\x60\x19\xcd\xd8\x3a\x61\xa0\x9c\x2d\x29\x7b\x11\xcc\x79\xb8\x62\x48\x5d\xe9\x0c\x34\x11\x5c\x84\x53\xd0\xe4\xcd\x4a\xdb\xc1\x64\x08\xca\xe3\xe7\xa1\x08\xd5\x5d\x8f\xf6\xce\xd1\xaf\x22\x4c\x75\xdf\x8e\xf1\xdb\x0c\xe3\x27\x8f\xf7\x67\x94\x98\x55\xf5\xf8\x7e\x4e\xbe\x8a\x77\xbe\x51\xa0\xf7\x67\xa2\xee\x9d\x37\x46\x7f\xdb\xe3\xbf\x19\xdb\xc8\xa9\xdf\xda\xbb\x66\xef\xf7\xe0\x47\x4e\xbd\xfe\xf9\x7e\x8e\x7e\x9b\xe3\xef\xf7\x8f\x67\x70\x0a\x3f\x8d\xbd\x5a\xa0\xaf\xe5\xe8\xff\x18\xdb\x2d\xd0\x3f\x72\x67\xda\xc1\xde\xd8\x5b\x1e\xef\xf7\x7f\x04\xe0\x62\x46\xfe\xad\x49\x64\x7f\xf7\x4d\xe3\x67\xf5\x96\x7f\x99\x91\x5b\xd7\x6d\xf4\x9f\x9d\xba\xcb\x8e\xde\xfe\x6f\x9c\x05\x00\x00\xff\xff\x2f\xf0\x0c\x84\x48\x05\x00\x00")

func nat_filterDebugOBytes() ([]byte, error) {
	return bindataRead(
		_nat_filterDebugO,
		"nat_filter-debug.o",
	)
}

func nat_filterDebugO() (*asset, error) {
	bytes, err := nat_filterDebugOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nat_filter-debug.o", size: 1352, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"nat_filter.o":       nat_filterO,
	"nat_filter-debug.o": nat_filterDebugO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"nat_filter-debug.o": {nat_filterDebugO, map[string]*bintree{}},
	"nat_filter.o":       {nat_filterO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
