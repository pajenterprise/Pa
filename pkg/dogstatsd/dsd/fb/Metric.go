// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Metric struct {
	_tab flatbuffers.Table
}

func GetRootAsMetric(buf []byte, offset flatbuffers.UOffsetT) *Metric {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Metric{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Metric) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Metric) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Metric) Type() MetricType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return MetricType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Metric) MutateType(n MetricType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *Metric) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Metric) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Metric) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Metric) Value() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Metric) MutateValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *Metric) SampleRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Metric) MutateSampleRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func (rcv *Metric) V() Version {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return Version(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Metric) MutateV(n Version) bool {
	return rcv._tab.MutateInt8Slot(14, int8(n))
}

func MetricStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func MetricAddType(builder *flatbuffers.Builder, type_ MetricType) {
	builder.PrependInt8Slot(0, int8(type_), 0)
}
func MetricAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func MetricAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(tags), 0)
}
func MetricStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MetricAddValue(builder *flatbuffers.Builder, value float64) {
	builder.PrependFloat64Slot(3, value, 0.0)
}
func MetricAddSampleRate(builder *flatbuffers.Builder, sampleRate float64) {
	builder.PrependFloat64Slot(4, sampleRate, 0.0)
}
func MetricAddV(builder *flatbuffers.Builder, v Version) {
	builder.PrependInt8Slot(5, int8(v), 0)
}
func MetricEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
